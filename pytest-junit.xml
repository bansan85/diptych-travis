<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="35" skipped="0" tests="36" time="22.709" timestamp="2020-12-21T21:57:50.525898" hostname="fv-az67-942"><testcase classname="tests.test_features" name="test_disabled_enable_debug" time="1.005"><failure message="Failed: Timeout &gt;1.0s">def test_disabled_enable_debug() -&gt; None:
        """Check that enable_debug=False works."""
        tc.assertTrue(
            fsext.is_file_exists(
                get_absolute_from_current_path(__file__, "0001.png")
            )
        )
        fsext.copy_file(
            get_absolute_from_current_path(__file__, "0001.png"),
            get_absolute_from_current_path(__file__, "0001_debug.png"),
        )
&gt;       treat_file(
            SeparatePage(),
            get_absolute_from_current_path(__file__, "0001_debug.png"),
            debug=DebugImage(DebugImage.Level.OFF),
        )

tests/test_features.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:152: in find_images
    gray2 = cv2ext.force_image_to_be_grayscale(image_no_border, (xxx, xxx))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 25..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)
blur_kernel_size = (7, 7)

    def force_image_to_be_grayscale(
        image: np.ndarray, blur_kernel_size: Tuple[int, int]
    ) -&gt; np.ndarray:
        if number_channels(image) == 1:
&gt;           one_channel_image = image.copy()
E           Failed: Timeout &gt;1.0s

cv2ext.py:511: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/0001_debug.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_features" name="test_mock_stop_at_0" time="0.050"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/0001_0.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="tests.test_features" name="test_mock_stop_at_2" time="1.081"><failure message="Failed: Timeout &gt;1.0s">def test_mock_stop_at_2() -&gt; None:
        """Check that stop_at 2 works."""
        tc.assertTrue(
            fsext.is_file_exists(
                get_absolute_from_current_path(__file__, "0001.png")
            )
        )
        fsext.copy_file(
            get_absolute_from_current_path(__file__, "0001.png"),
            get_absolute_from_current_path(__file__, "0001_2.png"),
        )
        fsext.del_pattern(fsext.extract_path(__file__), "0001_2.png_*")
&gt;       treat_file(
            MockDisableSeparatePage(2),
            get_absolute_from_current_path(__file__, "0001_2.png"),
            debug=DebugImage(DebugImage.Level.TOP),
        )

tests/test_features.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:154: in find_images
    blurimg_bc2 = cv2ext.erode_and_dilate(gray2, (xxx, xxx), xxx, True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 25..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)
size = (7, 7), iterations = 7, reverse = True

    def erode_and_dilate(
        image: np.ndarray,
        size: Tuple[int, int],
        iterations: int,
        reverse: bool = False,
    ) -&gt; np.ndarray:
        start = int(reverse)
        img = image
        for i in range(2):
            if (i + start) % 2 == 0:
                img = cv2.erode(
                    img,
                    cv2.getStructuringElement(cv2.MORPH_ELLIPSE, size),
                    iterations=iterations,
                )
            else:
&gt;               img = cv2.dilate(
                    img,
                    cv2.getStructuringElement(cv2.MORPH_ELLIPSE, size),
                    iterations=iterations,
                )
E               Failed: Timeout &gt;1.0s

cv2ext.py:846: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/0001_2.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (140009764665088) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_features" name="test_mock_stop_at_1" time="1.053"><failure message="Failed: Timeout &gt;1.0s">def test_mock_stop_at_1() -&gt; None:
        """Check that stop_at 1 works."""
        tc.assertTrue(
            fsext.is_file_exists(
                get_absolute_from_current_path(__file__, "0001.png")
            )
        )
        fsext.copy_file(
            get_absolute_from_current_path(__file__, "0001.png"),
            get_absolute_from_current_path(__file__, "0001_1.png"),
        )
        fsext.del_pattern(fsext.extract_path(__file__), "0001_1.png_*")
&gt;       treat_file(
            MockDisableSeparatePage(1),
            get_absolute_from_current_path(__file__, "0001_1.png"),
            debug=DebugImage(DebugImage.Level.TOP),
        )

tests/test_features.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = array([[255, 255, 255, ...,   0,   0,   0],
       [255, 255, 255, ...,   0,   0,   0],
       [255, 255, 255, ...,   ...,   0,   0,   0],
       [  0,   0,   0, ...,   0,   0,   0],
       [  0,   0,   0, ...,   0,   0,   0]], dtype=uint8)
param = &lt;page.find_images.FindImageParameters object at 0x7f250f497be0&gt;
page_angle = 0.0Â°, debug = &lt;debug_image.DebugImage object at 0x7f250f46ff10&gt;

    @inc_debug
    def find_images(
        image: np.ndarray,
        param: FindImageParameters,
        page_angle: Optional[Angle],
        debug: DebugImage,
    ) -&gt; np.ndarray:
        __internal_border__ = 20
        xxx = 7
    
        debug.image(image, DebugImage.Level.DEBUG)
        gray = cv2ext.force_image_to_be_grayscale(image, (xxx, xxx))
        debug.image(gray, DebugImage.Level.DEBUG)
        blurimg_bc = cv2ext.erode_and_dilate(gray, (xxx, xxx), xxx)
        debug.image(blurimg_bc, DebugImage.Level.DEBUG)
    
        if page_angle is not None:
            mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
            image_no_border = cv2ext.apply_mask(image, mask)
            debug.image(image_no_border, DebugImage.Level.DEBUG)
            gray2 = cv2ext.force_image_to_be_grayscale(image_no_border, (xxx, xxx))
            debug.image(gray2, DebugImage.Level.DEBUG)
            blurimg_bc2 = cv2ext.erode_and_dilate(gray2, (xxx, xxx), xxx, True)
            debug.image(blurimg_bc2, DebugImage.Level.DEBUG)
            gray_no_border = blurimg_bc2
        else:
            gray_no_border = blurimg_bc
        gray_bordered = cv2.copyMakeBorder(
            gray_no_border,
            __internal_border__,
            __internal_border__,
            __internal_border__,
            __internal_border__,
            cv2.BORDER_CONSTANT,
            value=[255],
        )
        debug.image(gray_bordered, DebugImage.Level.DEBUG)
        dilated = cv2.dilate(
            gray_bordered,
            cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (xxx, xxx)),
        )
        debug.image(dilated, DebugImage.Level.DEBUG)
        thresholdi = cv2ext.threshold_from_gaussian_histogram_white(dilated)
        _, threshold = cv2.threshold(
            dilated, thresholdi, 255, cv2.THRESH_BINARY_INV
        )
        debug.image(threshold, DebugImage.Level.DEBUG)
    
&gt;       morpho1 = cv2.morphologyEx(
            threshold,
            cv2.MORPH_CLOSE,
            cv2.getStructuringElement(
                cv2.MORPH_ELLIPSE, param.kernel_morphology_size
            ),
        )
E       Failed: Timeout &gt;1.0s

page/find_images.py:180: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/0001_1.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_features" name="test_mock_stop_at_4" time="1.002"><failure message="Failed: Timeout &gt;1.0s">def test_mock_stop_at_4() -&gt; None:
        """Check that stop_at 4 works."""
        tc.assertTrue(
            fsext.is_file_exists(
                get_absolute_from_current_path(__file__, "0001.png")
            )
        )
        fsext.copy_file(
            get_absolute_from_current_path(__file__, "0001.png"),
            get_absolute_from_current_path(__file__, "0001_4.png"),
        )
        fsext.del_pattern(fsext.extract_path(__file__), "0001_4.png_*")
&gt;       treat_file(
            MockDisableSeparatePage(4),
            get_absolute_from_current_path(__file__, "0001_4.png"),
            debug=DebugImage(DebugImage.Level.TOP),
        )

tests/test_features.py:365: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = array([[255, 255, 255, ...,   0,   0,   0],
       [255, 255, 255, ...,   0,   0,   0],
       [255, 255, 255, ...,   ...,   0,   0,   0],
       [  0,   0,   0, ...,   0,   0,   0],
       [  0,   0,   0, ...,   0,   0,   0]], dtype=uint8)
param = &lt;page.find_images.FindImageParameters object at 0x7f566a04dee0&gt;
page_angle = 0.0Â°, debug = &lt;debug_image.DebugImage object at 0x7f565f259fd0&gt;

    @inc_debug
    def find_images(
        image: np.ndarray,
        param: FindImageParameters,
        page_angle: Optional[Angle],
        debug: DebugImage,
    ) -&gt; np.ndarray:
        __internal_border__ = 20
        xxx = 7
    
        debug.image(image, DebugImage.Level.DEBUG)
        gray = cv2ext.force_image_to_be_grayscale(image, (xxx, xxx))
        debug.image(gray, DebugImage.Level.DEBUG)
        blurimg_bc = cv2ext.erode_and_dilate(gray, (xxx, xxx), xxx)
        debug.image(blurimg_bc, DebugImage.Level.DEBUG)
    
        if page_angle is not None:
            mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
            image_no_border = cv2ext.apply_mask(image, mask)
            debug.image(image_no_border, DebugImage.Level.DEBUG)
            gray2 = cv2ext.force_image_to_be_grayscale(image_no_border, (xxx, xxx))
            debug.image(gray2, DebugImage.Level.DEBUG)
            blurimg_bc2 = cv2ext.erode_and_dilate(gray2, (xxx, xxx), xxx, True)
            debug.image(blurimg_bc2, DebugImage.Level.DEBUG)
            gray_no_border = blurimg_bc2
        else:
            gray_no_border = blurimg_bc
        gray_bordered = cv2.copyMakeBorder(
            gray_no_border,
            __internal_border__,
            __internal_border__,
            __internal_border__,
            __internal_border__,
            cv2.BORDER_CONSTANT,
            value=[255],
        )
        debug.image(gray_bordered, DebugImage.Level.DEBUG)
        dilated = cv2.dilate(
            gray_bordered,
            cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (xxx, xxx)),
        )
        debug.image(dilated, DebugImage.Level.DEBUG)
        thresholdi = cv2ext.threshold_from_gaussian_histogram_white(dilated)
&gt;       _, threshold = cv2.threshold(
            dilated, thresholdi, 255, cv2.THRESH_BINARY_INV
        )
E       Failed: Timeout &gt;1.0s

page/find_images.py:175: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/0001_4.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (140009764665088) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_features" name="test_mock_stop_at_3" time="1.073"><failure message="Failed: Timeout &gt;1.0s">def test_mock_stop_at_3() -&gt; None:
        """Check that stop_at 3 works."""
        tc.assertTrue(
            fsext.is_file_exists(
                get_absolute_from_current_path(__file__, "0001.png")
            )
        )
        fsext.copy_file(
            get_absolute_from_current_path(__file__, "0001.png"),
            get_absolute_from_current_path(__file__, "0001_3.png"),
        )
        fsext.del_pattern(fsext.extract_path(__file__), "0001_3.png_*")
&gt;       treat_file(
            MockDisableSeparatePage(3),
            get_absolute_from_current_path(__file__, "0001_3.png"),
            debug=DebugImage(DebugImage.Level.TOP),
        )

tests/test_features.py:285: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = array([[255, 255, 255, ...,   0,   0,   0],
       [255, 255, 255, ...,   0,   0,   0],
       [255, 255, 255, ...,   ...,   0,   0,   0],
       [  0,   0,   0, ...,   0,   0,   0],
       [  0,   0,   0, ...,   0,   0,   0]], dtype=uint8)
param = &lt;page.find_images.FindImageParameters object at 0x7f250f497be0&gt;
page_angle = 0.0Â°, debug = &lt;debug_image.DebugImage object at 0x7f250f29b940&gt;

    @inc_debug
    def find_images(
        image: np.ndarray,
        param: FindImageParameters,
        page_angle: Optional[Angle],
        debug: DebugImage,
    ) -&gt; np.ndarray:
        __internal_border__ = 20
        xxx = 7
    
        debug.image(image, DebugImage.Level.DEBUG)
        gray = cv2ext.force_image_to_be_grayscale(image, (xxx, xxx))
        debug.image(gray, DebugImage.Level.DEBUG)
        blurimg_bc = cv2ext.erode_and_dilate(gray, (xxx, xxx), xxx)
        debug.image(blurimg_bc, DebugImage.Level.DEBUG)
    
        if page_angle is not None:
            mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
            image_no_border = cv2ext.apply_mask(image, mask)
            debug.image(image_no_border, DebugImage.Level.DEBUG)
            gray2 = cv2ext.force_image_to_be_grayscale(image_no_border, (xxx, xxx))
            debug.image(gray2, DebugImage.Level.DEBUG)
            blurimg_bc2 = cv2ext.erode_and_dilate(gray2, (xxx, xxx), xxx, True)
            debug.image(blurimg_bc2, DebugImage.Level.DEBUG)
            gray_no_border = blurimg_bc2
        else:
            gray_no_border = blurimg_bc
        gray_bordered = cv2.copyMakeBorder(
            gray_no_border,
            __internal_border__,
            __internal_border__,
            __internal_border__,
            __internal_border__,
            cv2.BORDER_CONSTANT,
            value=[255],
        )
        debug.image(gray_bordered, DebugImage.Level.DEBUG)
        dilated = cv2.dilate(
            gray_bordered,
            cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (xxx, xxx)),
        )
        debug.image(dilated, DebugImage.Level.DEBUG)
        thresholdi = cv2ext.threshold_from_gaussian_histogram_white(dilated)
        _, threshold = cv2.threshold(
            dilated, thresholdi, 255, cv2.THRESH_BINARY_INV
        )
        debug.image(threshold, DebugImage.Level.DEBUG)
    
&gt;       morpho1 = cv2.morphologyEx(
            threshold,
            cv2.MORPH_CLOSE,
            cv2.getStructuringElement(
                cv2.MORPH_ELLIPSE, param.kernel_morphology_size
            ),
        )
E       Failed: Timeout &gt;1.0s

page/find_images.py:180: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/0001_3.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_0001_png" time="1.000"><failure message="Failed: Timeout &gt;1.0s">def test_0001_png() -&gt; None:
        """first good page"""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(__file__, "0001.png"),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(90.46),
                    Angle.deg(90.63),
                ),
                ConstString.separation_double_page_y(): ("range", 2481, 2489),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(0.65),
                    Angle.deg(0.76),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(0.14),
                    Angle.deg(0.21),
                ),
                ConstString.image_crop(1, "x1"): ("range", 330, 332),
                ConstString.image_crop(1, "y1"): ("range", 335, 337),
                ConstString.image_crop(1, "x2"): ("range", 2342, 2343),
                ConstString.image_crop(1, "y2"): ("range", 3222, 3223),
                ConstString.image_crop(2, "x1"): ("range", 168, 175),
                ConstString.image_crop(2, "y1"): ("range", 648, 649),
                ConstString.image_crop(2, "x2"): ("range", 2180, 2189),
                ConstString.image_crop(2, "y2"): ("range", 3360, 3361),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 317, 340),
                ConstString.image_border(1, 2): ("range", 260, 282),
                ConstString.image_border(1, 3): ("range", 223, 225),
                ConstString.image_border(1, 4): ("range", 223, 225),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 639, 674),
                ConstString.image_border(2, 2): ("range", 101, 134),
                ConstString.image_border(2, 3): ("range", 221, 224),
                ConstString.image_border(2, 4): ("range", 221, 224),
            },
        )

tests/test_images.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:109: in remove_black_border_in_image
    ) = cv2ext.find_longest_lines_in_border(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

shape = (3507, 4960), epsilon = 5
cnt = array([[[3333,  653]],

       [[3332,  654]],

       [[3332,  655]],

       [[3334,  657]],

       [[3334,  691]],...,  655]],

       [[3342,  655]],

       [[3341,  654]],

       [[3340,  654]],

       [[3339,  653]]], dtype=int32)

    def find_longest_lines_in_border(
        shape: Tuple[int, int], epsilon: int, cnt: np.ndarray
    ) -&gt; Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int], Tuple[int, int]]:
        height, width = shape
        left_top = height
        left_bottom = 0
        right_top = height
        right_bottom = 0
        top_left = width
        top_right = 0
        bottom_left = width
        bottom_right = 0
        for pt1, pt2 in compute.iterator_zip_n_n_1(cnt):
            point1_x, point1_y = pt1[0]
            point2_x, point2_y = pt2[0]
            if point1_x &lt;= epsilon and point2_x &lt;= epsilon:
                left_top = min(left_top, point1_y, point2_y)
                left_bottom = max(left_bottom, point1_y, point2_y)
&gt;           if point1_y &lt;= epsilon and point2_y &lt;= epsilon:
E           Failed: Timeout &gt;1.0s

cv2ext.py:661: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/0001.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (140009764665088) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_features" name="test_mock_stop_at_5" time="1.005"><failure message="Failed: Timeout &gt;1.0s">def test_mock_stop_at_5() -&gt; None:
        """Check that stop_at 5 works."""
        tc.assertTrue(
            fsext.is_file_exists(
                get_absolute_from_current_path(__file__, "0001.png")
            )
        )
        fsext.copy_file(
            get_absolute_from_current_path(__file__, "0001.png"),
            get_absolute_from_current_path(__file__, "0001_5.png"),
        )
        fsext.del_pattern(fsext.extract_path(__file__), "0001_5.png_*")
&gt;       treat_file(
            MockDisableSeparatePage(5),
            get_absolute_from_current_path(__file__, "0001_5.png"),
            debug=DebugImage(DebugImage.Level.TOP),
        )

tests/test_features.py:445: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = array([[255, 255, 255, ...,   0,   0,   0],
       [255, 255, 255, ...,   0,   0,   0],
       [255, 255, 255, ...,   ...,   0,   0,   0],
       [  0,   0,   0, ...,   0,   0,   0],
       [  0,   0,   0, ...,   0,   0,   0]], dtype=uint8)
param = &lt;page.find_images.FindImageParameters object at 0x7f250f497be0&gt;
page_angle = 0.0Â°, debug = &lt;debug_image.DebugImage object at 0x7f250f3dd5b0&gt;

    @inc_debug
    def find_images(
        image: np.ndarray,
        param: FindImageParameters,
        page_angle: Optional[Angle],
        debug: DebugImage,
    ) -&gt; np.ndarray:
        __internal_border__ = 20
        xxx = 7
    
        debug.image(image, DebugImage.Level.DEBUG)
        gray = cv2ext.force_image_to_be_grayscale(image, (xxx, xxx))
        debug.image(gray, DebugImage.Level.DEBUG)
        blurimg_bc = cv2ext.erode_and_dilate(gray, (xxx, xxx), xxx)
        debug.image(blurimg_bc, DebugImage.Level.DEBUG)
    
        if page_angle is not None:
            mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
            image_no_border = cv2ext.apply_mask(image, mask)
            debug.image(image_no_border, DebugImage.Level.DEBUG)
            gray2 = cv2ext.force_image_to_be_grayscale(image_no_border, (xxx, xxx))
            debug.image(gray2, DebugImage.Level.DEBUG)
            blurimg_bc2 = cv2ext.erode_and_dilate(gray2, (xxx, xxx), xxx, True)
            debug.image(blurimg_bc2, DebugImage.Level.DEBUG)
            gray_no_border = blurimg_bc2
        else:
            gray_no_border = blurimg_bc
        gray_bordered = cv2.copyMakeBorder(
            gray_no_border,
            __internal_border__,
            __internal_border__,
            __internal_border__,
            __internal_border__,
            cv2.BORDER_CONSTANT,
            value=[255],
        )
        debug.image(gray_bordered, DebugImage.Level.DEBUG)
        dilated = cv2.dilate(
            gray_bordered,
            cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (xxx, xxx)),
        )
        debug.image(dilated, DebugImage.Level.DEBUG)
        thresholdi = cv2ext.threshold_from_gaussian_histogram_white(dilated)
&gt;       _, threshold = cv2.threshold(
            dilated, thresholdi, 255, cv2.THRESH_BINARY_INV
        )
E       Failed: Timeout &gt;1.0s

page/find_images.py:175: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/0001_5.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_black_border_not_removed_png" time="1.005"><failure message="Failed: Timeout &gt;1.0s">def test_black_border_not_removed_png() -&gt; None:
        """The border on the right is still there."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(
                __file__, "black-border-not-removed.png"
            ),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(89.95),
                    Angle.deg(90.1),
                ),
                ConstString.separation_double_page_y(): ("range", 2451, 2458),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(-0.01),
                    Angle.deg(0.06),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(-0.21),
                    Angle.deg(0.01),
                ),
                ConstString.image_crop(1, "x1"): ("range", 297, 299),
                ConstString.image_crop(1, "y1"): ("range", 142, 144),
                ConstString.image_crop(1, "x2"): ("range", 2307, 2309),
                ConstString.image_crop(1, "y2"): ("range", 3346, 3347),
                ConstString.image_crop(2, "x1"): ("range", 156, 159),
                ConstString.image_crop(2, "y1"): ("range", 144, 146),
                ConstString.image_crop(2, "x2"): ("range", 2168, 2172),
                ConstString.image_crop(2, "y2"): ("range", 3351, 3353),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 127, 134),
                ConstString.image_border(1, 2): ("range", 148, 157),
                ConstString.image_border(1, 3): ("range", 224, 226),
                ConstString.image_border(1, 4): ("range", 224, 226),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 130, 139),
                ConstString.image_border(2, 2): ("range", 141, 151),
                ConstString.image_border(2, 3): ("range", 223, 224),
                ConstString.image_border(2, 4): ("range", 223, 224),
            },
        )

tests/test_images.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:119: in remove_black_border_in_image
    cv2ext.insert_border_in_mask(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cnt = array([[[2457, 3453]],

       [[2457, 3455]],

       [[2456, 3456]],

       [[2456, 3458]],

       [[2455, 3459]],..., 3459]],

       [[2459, 3457]],

       [[2459, 3456]],

       [[2458, 3455]],

       [[2458, 3454]]], dtype=int32)
threshold2 = array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 25..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)
mask_border_only = array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 25..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)
epsilon = (5, 3.0Â°), page_angle = 0.0Â°

    def insert_border_in_mask(
        cnt: np.ndarray,
        threshold2: np.ndarray,
        mask_border_only: np.ndarray,
        epsilon: Tuple[int, Angle],
        page_angle: Angle,
    ) -&gt; None:
        __pourcentage_white_allowed__ = 0.01
        epsilon_border, epsilon_angle = epsilon
        height, width = get_hw(threshold2)
        cnt2 = cnt[cnt[:, 0, 0] &gt; epsilon_border]
        cnt3 = cnt2[cnt2[:, 0, 0] &lt; width - 1 - epsilon_border]
        cnt4 = cnt3[cnt3[:, 0, 1] &gt; epsilon_border]
        cnt5 = cnt4[cnt4[:, 0, 1] &lt; height - 1 - epsilon_border]
        if len(cnt5) == 0:
            return
        contour_approximate = cv2.approxPolyDP(cnt5, epsilon_border, True)
        all_pair = list(compute.iterator_zip_n_n_1(contour_approximate))
        all_pair_no_single_pixel = list(
            filter(
                lambda x: x[0][0][0] != x[1][0][0] or x[0][0][1] != x[1][0][1],
                all_pair,
            )
        )
        all_angles = list(
            map(
                lambda x: (
                    (x[0][0], x[1][0]),
                    compute.get_angle_0_180(x[0][0], x[1][0]),
                    np.linalg.norm(x[0][0] - x[1][0]),
                ),
                all_pair_no_single_pixel,
            )
        )
        vertical_lines = list(
            filter(
                lambda x: compute.is_angle_closed_to(
                    x[1],
                    page_angle + Angle.deg(90.0),
                    epsilon_angle,
                    Angle.deg(180),
                ),
                all_angles,
            )
        )
        horizontal_lines = list(
            filter(
                lambda x: compute.is_angle_closed_to(
                    x[1], page_angle, epsilon_angle, Angle.deg(180)
                ),
                all_angles,
            )
        )
        vertical_lines_pos = list(
            map(
                lambda x: (
                    compute.get_angle_0_180_posx_safe(x[0][0], x[0][1])[1],
                    x[1],
                ),
                vertical_lines,
            )
        )
        horizontal_lines_pos = list(
            map(
                lambda x: (
                    compute.get_angle_0_180_posy_safe(x[0][0], x[0][1])[1],
                    x[1],
                ),
                horizontal_lines,
            )
        )
        vertical_lines_pos.sort(key=lambda x: x[0])
        horizontal_lines_pos.sort(key=lambda x: x[0])
        for posx, angle in vertical_lines_pos:
            mask = np.zeros((height, width), np.uint8)
            bottom_point = compute.get_bottom_point_from_alpha_posx(
                angle, posx, height
            )
            if posx &lt; width / 2:
                pts = np.array(
                    [
                        [-1, 0],
                        [posx - 1, 0],
                        [bottom_point[0] - 1, bottom_point[1]],
                        [-1, height - 1],
                    ]
                )
            else:
                pts = np.array(
                    [
                        [width, 0],
                        [posx + 1, 0],
                        [bottom_point[0] + 1, bottom_point[1]],
                        [width, height - 1],
                    ]
                )
            mask = cv2.drawContours(mask, [pts], 0, 255, -1)
            histogram = cv2.calcHist([threshold2], [0], mask, [2], [0, 256])
            if __pourcentage_white_allowed__ * histogram[0] &gt; sum(
                histogram[1:]
            ) or __pourcentage_white_allowed__ * histogram[-1] &gt; sum(
                histogram[:-1]
            ):
                mask_border_only = cv2.drawContours(
                    mask_border_only, [pts], 0, (0), -1
                )
        for posy, angle in horizontal_lines_pos:
            mask = np.zeros((height, width), np.uint8)
            bottom_point = compute.get_right_point_from_alpha_posy(
                angle, posy, width
            )
            if posy &lt; height / 2:
                pts = np.array(
                    [
                        [0, -1],
                        [0, posy - 1],
                        [bottom_point[0], bottom_point[1] - 1],
                        [width - 1, -1],
                    ]
                )
            else:
                pts = np.array(
                    [
                        [0, height],
                        [0, posy + 1],
                        [bottom_point[0], bottom_point[1] + 1],
                        [width - 1, height],
                    ]
                )
            mask = cv2.drawContours(mask, [pts], 0, 255, -1)
&gt;           histogram = cv2.calcHist([threshold2], [0], mask, [2], [0, 256])
E           Failed: Timeout &gt;1.0s

cv2ext.py:811: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/black-border-not-removed.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (140009764665088) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_2_pages_2_contours_png" time="1.000"><failure message="Failed: Timeout &gt;1.0s">def test_2_pages_2_contours_png() -&gt; None:
        """There is not one contour for the two pages,
        but one contour for each page.
        """
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(__file__, "2-pages-2-contours.png"),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(89.91),
                    Angle.deg(90.32),
                ),
                ConstString.separation_double_page_y(): ("range", 2486, 2492),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(-0.01),
                    Angle.deg(0.11),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(0.19),
                    Angle.deg(0.41),
                ),
                ConstString.image_crop(1, "x1"): ("range", 1181, 1191),
                ConstString.image_crop(1, "y1"): ("range", 1719, 1751),
                ConstString.image_crop(1, "x2"): ("range", 1182, 1192),
                ConstString.image_crop(1, "y2"): ("range", 1720, 1752),
                ConstString.image_crop(2, "x1"): ("range", 89, 114),
                ConstString.image_crop(2, "y1"): ("range", 240, 241),
                ConstString.image_crop(2, "x2"): ("range", 2136, 2159),
                ConstString.image_crop(2, "y2"): ("range", 3239, 3240),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 1752, 1753),
                ConstString.image_border(1, 2): ("range", 1753, 1753),
                ConstString.image_border(1, 3): ("range", 1239, 1239),
                ConstString.image_border(1, 4): ("range", 1239, 1239),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 226, 240),
                ConstString.image_border(2, 2): ("range", 248, 262),
                ConstString.image_border(2, 3): ("range", 206, 207),
                ConstString.image_border(2, 4): ("range", 206, 207),
            },
        )

tests/test_images.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:109: in remove_black_border_in_image
    ) = cv2ext.find_longest_lines_in_border(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

shape = (3507, 4960), epsilon = 5
cnt = array([[[2728,  950]],

       [[2728,  951]],

       [[2729,  952]],

       [[2729,  966]],

       [[2721,  974]],...,  952]],

       [[2733,  952]],

       [[2732,  951]],

       [[2731,  951]],

       [[2730,  950]]], dtype=int32)

    def find_longest_lines_in_border(
        shape: Tuple[int, int], epsilon: int, cnt: np.ndarray
    ) -&gt; Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int], Tuple[int, int]]:
        height, width = shape
        left_top = height
        left_bottom = 0
        right_top = height
        right_bottom = 0
        top_left = width
        top_right = 0
        bottom_left = width
        bottom_right = 0
        for pt1, pt2 in compute.iterator_zip_n_n_1(cnt):
&gt;           point1_x, point1_y = pt1[0]
E           Failed: Timeout &gt;1.0s

cv2ext.py:656: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/2-pages-2-contours.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_image_failed_to_rotate_png" time="1.161"><failure message="Failed: Timeout &gt;1.0s">def test_image_failed_to_rotate_png() -&gt; None:
        """Failed to compute angle to rotate. The image takes the whole page."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(__file__, "image_failed_to_rotate.png"),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(90.07),
                    Angle.deg(90.50),
                ),
                ConstString.separation_double_page_y(): ("range", 2476, 2487),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(0.29),
                    Angle.deg(0.41),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(0.34),
                    Angle.deg(0.51),
                ),
                ConstString.image_crop(1, "x1"): ("range", 33, 91),
                ConstString.image_crop(1, "y1"): ("range", 1, 23),
                ConstString.image_crop(1, "x2"): ("range", 2456, 2483),
                ConstString.image_crop(1, "y2"): ("range", 3483, 3501),
                ConstString.image_crop(2, "x1"): ("range", 166, 183),
                ConstString.image_crop(2, "y1"): ("range", 234, 236),
                ConstString.image_crop(2, "x2"): ("range", 2245, 2261),
                ConstString.image_crop(2, "y2"): ("range", 3354, 3356),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 4, 19),
                ConstString.image_border(1, 2): ("range", 4, 19),
                ConstString.image_border(1, 3): ("range", 16, 55),
                ConstString.image_border(1, 4): ("range", 16, 55),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 206, 228),
                ConstString.image_border(2, 2): ("range", 140, 160),
                ConstString.image_border(2, 3): ("range", 189, 192),
                ConstString.image_border(2, 4): ("range", 189, 192),
            },
        )

tests/test_images.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:89: in remove_black_border_in_image
    debug.image(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;debug_image.DebugImage object at 0x7f566a1272e0&gt;
img = array([[[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ...,
        [  0,   0, 255],
     ...[  0,   0, 255],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]]], dtype=uint8)
level = &lt;Level.DEBUG: 1&gt;

    def image(self, img: np.ndarray, level: Level) -&gt; None:
        if level &gt;= self.__level:
            name = self.name()
            self.__next()
            self.__next_when_dec[0 : self.__sub_level] = [
                True for x in range(self.__sub_level)
            ]
&gt;           if not cv2.imwrite(name, img):
E           Failed: Timeout &gt;1.0s

debug_image.py:71: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/image_failed_to_rotate.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (140009764665088) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_wrong_split_line_png" time="1.000"><failure message="Failed: Timeout &gt;1.0s">def test_wrong_split_line_png() -&gt; None:
        """Improve choice of the split line between different algorithm."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(__file__, "wrong_split_line.png"),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(89.81),
                    Angle.deg(89.94),
                ),
                ConstString.separation_double_page_y(): ("range", 2463, 2465),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(-0.16),
                    Angle.deg(-0.04),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(0.49),
                    Angle.deg(0.66),
                ),
                ConstString.image_crop(1, "x1"): ("range", 211, 213),
                ConstString.image_crop(1, "y1"): ("range", 156, 157),
                ConstString.image_crop(1, "x2"): ("range", 2323, 2323),
                ConstString.image_crop(1, "y2"): ("range", 3362, 3363),
                ConstString.image_crop(2, "x1"): ("range", 124, 126),
                ConstString.image_crop(2, "y1"): ("range", 165, 167),
                ConstString.image_crop(2, "x2"): ("range", 2236, 2237),
                ConstString.image_crop(2, "y2"): ("range", 3372, 3374),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 115, 180),
                ConstString.image_border(1, 2): ("range", 100, 167),
                ConstString.image_border(1, 3): ("range", 174, 175),
                ConstString.image_border(1, 4): ("range", 174, 175),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 129, 143),
                ConstString.image_border(2, 2): ("range", 135, 152),
                ConstString.image_border(2, 3): ("range", 174, 174),
                ConstString.image_border(2, 4): ("range", 174, 174),
            },
        )

tests/test_images.py:351: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:109: in remove_black_border_in_image
    ) = cv2ext.find_longest_lines_in_border(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

shape = (3507, 4960), epsilon = 5
cnt = array([[[3926,  439]],

       [[3930,  443]],

       [[3930,  441]],

       [[3929,  441]],

       [[3928,  440]],

       [[3927,  440]]], dtype=int32)

    def find_longest_lines_in_border(
        shape: Tuple[int, int], epsilon: int, cnt: np.ndarray
    ) -&gt; Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int], Tuple[int, int]]:
        height, width = shape
        left_top = height
        left_bottom = 0
        right_top = height
        right_bottom = 0
        top_left = width
        top_right = 0
        bottom_left = width
        bottom_right = 0
        for pt1, pt2 in compute.iterator_zip_n_n_1(cnt):
            point1_x, point1_y = pt1[0]
            point2_x, point2_y = pt2[0]
            if point1_x &lt;= epsilon and point2_x &lt;= epsilon:
                left_top = min(left_top, point1_y, point2_y)
                left_bottom = max(left_bottom, point1_y, point2_y)
            if point1_y &lt;= epsilon and point2_y &lt;= epsilon:
                top_left = min(top_left, point1_x, point2_x)
                top_right = max(top_right, point1_x, point2_x)
            if point1_x &gt;= width - 1 - epsilon and point2_x &gt;= width - 1 - epsilon:
                right_top = min(right_top, point1_y, point2_y)
                right_bottom = max(right_bottom, point1_y, point2_y)
            if (
&gt;               point1_y &gt;= height - 1 - epsilon
                and point2_y &gt;= height - 1 - epsilon
            ):
E           Failed: Timeout &gt;1.0s

cv2ext.py:668: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/wrong_split_line.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_image_failed_to_crop_data_png" time="1.180"><failure message="Failed: Timeout &gt;1.0s">def test_image_failed_to_crop_data_png() -&gt; None:
        """Failed to detect edges. The image takes the whole page and is too closed
        to the border of the image.
        """
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(
                __file__, "image_failed_to_crop_data.png"
            ),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(89.89),
                    Angle.deg(90.17),
                ),
                ConstString.separation_double_page_y(): ("range", 2477, 2486),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(-0.16),
                    Angle.deg(0.21),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(-0.01),
                    Angle.deg(0.21),
                ),
                ConstString.image_crop(1, "x1"): ("range", 43, 116),
                ConstString.image_crop(1, "y1"): ("range", 3, 13),
                ConstString.image_crop(1, "x2"): ("range", 2476, 2483),
                ConstString.image_crop(1, "y2"): ("range", 3499, 3505),
                ConstString.image_crop(2, "x1"): ("range", 155, 167),
                ConstString.image_crop(2, "y1"): ("range", 217, 220),
                ConstString.image_crop(2, "x2"): ("range", 2235, 2248),
                ConstString.image_crop(2, "y2"): ("range", 3348, 3350),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 5, 11),
                ConstString.image_border(1, 2): ("range", 5, 11),
                ConstString.image_border(1, 3): ("range", 21, 58),
                ConstString.image_border(1, 4): ("range", 21, 58),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 205, 225),
                ConstString.image_border(2, 2): ("range", 129, 149),
                ConstString.image_border(2, 3): ("range", 189, 192),
                ConstString.image_border(2, 4): ("range", 189, 192),
            },
        )

tests/test_images.py:203: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:89: in remove_black_border_in_image
    debug.image(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;debug_image.DebugImage object at 0x7f566a1272e0&gt;
img = array([[[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ...,
        [  0,   0, 255],
     ...[  0,   0, 255],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]]], dtype=uint8)
level = &lt;Level.DEBUG: 1&gt;

    def image(self, img: np.ndarray, level: Level) -&gt; None:
        if level &gt;= self.__level:
            name = self.name()
            self.__next()
            self.__next_when_dec[0 : self.__sub_level] = [
                True for x in range(self.__sub_level)
            ]
&gt;           if not cv2.imwrite(name, img):
E           Failed: Timeout &gt;1.0s

debug_image.py:71: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/image_failed_to_crop_data.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (140009764665088) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_crop_too_much_png" time="1.147"><failure message="Failed: Timeout &gt;1.0s">def test_crop_too_much_png() -&gt; None:
        """Reduce distance to ignore black area closed to the edge."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(__file__, "crop_too_much.png"),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(90.10),
                    Angle.deg(90.47),
                ),
                ConstString.separation_double_page_y(): ("range", 2453, 2463),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(-0.01),
                    Angle.deg(0.01),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(0.39),
                    Angle.deg(0.46),
                ),
                ConstString.image_crop(1, "x1"): ("range", 303, 303),
                ConstString.image_crop(1, "y1"): ("range", 148, 148),
                ConstString.image_crop(1, "x2"): ("range", 2313, 2313),
                ConstString.image_crop(1, "y2"): ("range", 3351, 3351),
                ConstString.image_crop(2, "x1"): ("range", 165, 180),
                ConstString.image_crop(2, "y1"): ("range", 154, 155),
                ConstString.image_crop(2, "x2"): ("range", 2177, 2191),
                ConstString.image_crop(2, "y2"): ("range", 3359, 3360),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 116, 133),
                ConstString.image_border(1, 2): ("range", 151, 168),
                ConstString.image_border(1, 3): ("range", 225, 225),
                ConstString.image_border(1, 4): ("range", 225, 225),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 95, 141),
                ConstString.image_border(2, 2): ("range", 142, 186),
                ConstString.image_border(2, 3): ("range", 223, 224),
                ConstString.image_border(2, 4): ("range", 223, 224),
            },
        )

tests/test_images.py:395: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:89: in remove_black_border_in_image
    debug.image(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;debug_image.DebugImage object at 0x7f25109bffa0&gt;
img = array([[[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ...,
        [  0,   0, 255],
     ...[  0,   0, 255],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]]], dtype=uint8)
level = &lt;Level.DEBUG: 1&gt;

    def image(self, img: np.ndarray, level: Level) -&gt; None:
        if level &gt;= self.__level:
            name = self.name()
            self.__next()
            self.__next_when_dec[0 : self.__sub_level] = [
                True for x in range(self.__sub_level)
            ]
&gt;           if not cv2.imwrite(name, img):
E           Failed: Timeout &gt;1.0s

debug_image.py:71: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/crop_too_much.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_wrong_angle_split_line_png" time="1.232"><failure message="Failed: Timeout &gt;1.0s">def test_wrong_angle_split_line_png() -&gt; None:
        """Failed to detect edges. The image takes the whole page and is too closed
        to the border of the image.
        """
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(__file__, "wrong_angle_split_line.png"),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(90.00),
                    Angle.deg(90.22),
                ),
                ConstString.separation_double_page_y(): ("range", 2477, 2487),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(-0.01),
                    Angle.deg(0.21),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(-0.01),
                    Angle.deg(0.21),
                ),
                ConstString.image_crop(1, "x1"): ("range", 53, 61),
                ConstString.image_crop(1, "y1"): ("range", 6, 9),
                ConstString.image_crop(1, "x2"): ("range", 2472, 2485),
                ConstString.image_crop(1, "y2"): ("range", 3500, 3505),
                ConstString.image_crop(2, "x1"): ("range", 154, 165),
                ConstString.image_crop(2, "y1"): ("range", 217, 219),
                ConstString.image_crop(2, "x2"): ("range", 2237, 2248),
                ConstString.image_crop(2, "y2"): ("range", 3348, 3350),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 5, 8),
                ConstString.image_border(1, 2): ("range", 5, 8),
                ConstString.image_border(1, 3): ("range", 24, 33),
                ConstString.image_border(1, 4): ("range", 24, 33),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 195, 219),
                ConstString.image_border(2, 2): ("range", 136, 159),
                ConstString.image_border(2, 3): ("range", 188, 192),
                ConstString.image_border(2, 4): ("range", 188, 192),
            },
        )

tests/test_images.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:142: in find_images
    debug.image(image, DebugImage.Level.DEBUG)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;debug_image.DebugImage object at 0x7f566a1272e0&gt;
img = array([[[210, 227, 214],
        [210, 227, 214],
        [211, 229, 216],
        ...,
        [ 60,  63,  71],
     ...[  2,   2,   2],
        ...,
        [ 30,  31,  29],
        [ 17,  20,  18],
        [ 12,  15,  13]]], dtype=uint8)
level = &lt;Level.DEBUG: 1&gt;

    def image(self, img: np.ndarray, level: Level) -&gt; None:
        if level &gt;= self.__level:
            name = self.name()
            self.__next()
            self.__next_when_dec[0 : self.__sub_level] = [
                True for x in range(self.__sub_level)
            ]
&gt;           if not cv2.imwrite(name, img):
E           Failed: Timeout &gt;1.0s

debug_image.py:71: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/wrong_angle_split_line.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (140009764665088) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_crop_too_few_png" time="1.001"><failure message="Failed: Timeout &gt;1.0s">def test_crop_too_few_png() -&gt; None:
        """Improve detection of black area to ignored
        and that are closed to the edge.
        """
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(__file__, "crop_too_few.png"),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(89.22),
                    Angle.deg(89.55),
                ),
                ConstString.separation_double_page_y(): ("range", 2508, 2512),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(-0.76),
                    Angle.deg(-0.64),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(-0.01),
                    Angle.deg(0.06),
                ),
                ConstString.image_crop(1, "x1"): ("range", 263, 265),
                ConstString.image_crop(1, "y1"): ("range", 150, 161),
                ConstString.image_crop(1, "x2"): ("range", 2375, 2377),
                ConstString.image_crop(1, "y2"): ("range", 3356, 3357),
                ConstString.image_crop(2, "x1"): ("range", 135, 141),
                ConstString.image_crop(2, "y1"): ("range", 141, 141),
                ConstString.image_crop(2, "x2"): ("range", 2259, 2263),
                ConstString.image_crop(2, "y2"): ("range", 3345, 3345),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 84, 134),
                ConstString.image_border(1, 2): ("range", 149, 208),
                ConstString.image_border(1, 3): ("range", 173, 175),
                ConstString.image_border(1, 4): ("range", 173, 175),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 129, 143),
                ConstString.image_border(2, 2): ("range", 140, 154),
                ConstString.image_border(2, 3): ("range", 167, 169),
                ConstString.image_border(2, 4): ("range", 167, 169),
            },
        )

tests/test_images.py:441: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_bordered = array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)
page_angle = 0.0Â°, debug = &lt;debug_image.DebugImage object at 0x7f25109bffa0&gt;

    @inc_debug
    def remove_black_border_in_image(
        gray_bordered: np.ndarray, page_angle: Angle, debug: DebugImage
    ) -&gt; np.ndarray:
        thresholdi = cv2ext.threshold_from_gaussian_histogram_black(gray_bordered)
        _, threshold = cv2.threshold(
            gray_bordered, thresholdi, 255, cv2.THRESH_BINARY_INV
        )
        debug.image(threshold, DebugImage.Level.DEBUG)
        contours, _ = cv2.findContours(
            threshold, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE
        )
        debug.image(
            cv2.drawContours(
                cv2ext.convertion_en_couleur(gray_bordered),
                contours,
                -1,
                (0, 0, 255),
                3,
            ),
            DebugImage.Level.DEBUG,
        )
        __epsilon__ = 5
&gt;       mask_border_only = 255 * np.ones(shape=gray_bordered.shape, dtype=np.uint8)
E       Failed: Timeout &gt;1.0s

page/find_images.py:100: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/crop_too_few.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_angle_page_lower_split_line_png" time="1.008"><failure message="Failed: Timeout &gt;1.0s">def test_angle_page_lower_split_line_png() -&gt; None:
        """Failed when angle of a page in lower than
        the angle of the split line.
        """
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(
                __file__, "angle_page_lower_split_line.png"
            ),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(89.71),
                    Angle.deg(89.81),
                ),
                ConstString.separation_double_page_y(): ("range", 2471, 2475),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(-0.46),
                    Angle.deg(-0.34),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(0.09),
                    Angle.deg(0.21),
                ),
                ConstString.image_crop(1, "x1"): ("range", 243, 245),
                ConstString.image_crop(1, "y1"): ("range", 159, 161),
                ConstString.image_crop(1, "x2"): ("range", 2350, 2351),
                ConstString.image_crop(1, "y2"): ("range", 3364, 3365),
                ConstString.image_crop(2, "x1"): ("range", 136, 153),
                ConstString.image_crop(2, "y1"): ("range", 146, 147),
                ConstString.image_crop(2, "x2"): ("range", 2243, 2260),
                ConstString.image_crop(2, "y2"): ("range", 3350, 3351),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 130, 145),
                ConstString.image_border(1, 2): ("range", 138, 152),
                ConstString.image_border(1, 3): ("range", 176, 177),
                ConstString.image_border(1, 4): ("range", 176, 177),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 116, 130),
                ConstString.image_border(2, 2): ("range", 153, 168),
                ConstString.image_border(2, 3): ("range", 175, 176),
                ConstString.image_border(2, 4): ("range", 175, 176),
            },
        )

tests/test_images.py:305: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:89: in remove_black_border_in_image
    debug.image(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;debug_image.DebugImage object at 0x7f566a1272e0&gt;
img = array([[[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ...,
        [  0,   0, 255],
     ...[  0,   0, 255],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]]], dtype=uint8)
level = &lt;Level.DEBUG: 1&gt;

    def image(self, img: np.ndarray, level: Level) -&gt; None:
        if level &gt;= self.__level:
            name = self.name()
            self.__next()
            self.__next_when_dec[0 : self.__sub_level] = [
                True for x in range(self.__sub_level)
            ]
&gt;           if not cv2.imwrite(name, img):
E           Failed: Timeout &gt;1.0s

debug_image.py:71: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/angle_page_lower_split_line.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (140009764665088) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_crop_too_much_2_png" time="1.088"><failure message="Failed: Timeout &gt;1.0s">def test_crop_too_much_2_png() -&gt; None:
        """Reduce distance to ignore black area closed to the edge."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(__file__, "crop_too_much_2.png"),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(90.11),
                    Angle.deg(90.24),
                ),
                ConstString.separation_double_page_y(): ("range", 2475, 2482),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(0.19),
                    Angle.deg(0.21),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(0.19),
                    Angle.deg(0.21),
                ),
                ConstString.image_crop(1, "x1"): ("range", 332, 332),
                ConstString.image_crop(1, "y1"): ("range", 131, 131),
                ConstString.image_crop(1, "x2"): ("range", 2342, 2342),
                ConstString.image_crop(1, "y2"): ("range", 3336, 3336),
                ConstString.image_crop(2, "x1"): ("range", 162, 169),
                ConstString.image_crop(2, "y1"): ("range", 139, 139),
                ConstString.image_crop(2, "x2"): ("range", 2175, 2182),
                ConstString.image_crop(2, "y2"): ("range", 3345, 3345),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 112, 120),
                ConstString.image_border(1, 2): ("range", 162, 170),
                ConstString.image_border(1, 3): ("range", 225, 225),
                ConstString.image_border(1, 4): ("range", 225, 225),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 123, 133),
                ConstString.image_border(2, 2): ("range", 148, 157),
                ConstString.image_border(2, 3): ("range", 223, 223),
                ConstString.image_border(2, 4): ("range", 223, 223),
            },
        )

tests/test_images.py:485: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:89: in remove_black_border_in_image
    debug.image(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;debug_image.DebugImage object at 0x7f25109bffa0&gt;
img = array([[[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ...,
        [  0,   0, 255],
     ...[  0,   0, 255],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]]], dtype=uint8)
level = &lt;Level.DEBUG: 1&gt;

    def image(self, img: np.ndarray, level: Level) -&gt; None:
        if level &gt;= self.__level:
            name = self.name()
            self.__next()
            self.__next_when_dec[0 : self.__sub_level] = [
                True for x in range(self.__sub_level)
            ]
&gt;           if not cv2.imwrite(name, img):
E           Failed: Timeout &gt;1.0s

debug_image.py:71: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/crop_too_much_2.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_wrong_split_line_2_png" time="1.185"><failure message="Failed: Timeout &gt;1.0s">def test_wrong_split_line_2_png() -&gt; None:
        """Improve choice of the split line between different algorithm."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(__file__, "wrong_split_line_2.png"),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(90.17),
                    Angle.deg(90.40),
                ),
                ConstString.separation_double_page_y(): ("range", 2436, 2442),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(0.04),
                    Angle.deg(0.21),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(0.34),
                    Angle.deg(0.41),
                ),
                ConstString.image_crop(1, "x1"): ("range", 294, 294),
                ConstString.image_crop(1, "y1"): ("range", 136, 137),
                ConstString.image_crop(1, "x2"): ("range", 2325, 2326),
                ConstString.image_crop(1, "y2"): ("range", 3375, 3376),
                ConstString.image_crop(2, "x1"): ("range", 138, 146),
                ConstString.image_crop(2, "y1"): ("range", 192, 193),
                ConstString.image_crop(2, "x2"): ("range", 2165, 2175),
                ConstString.image_crop(2, "y2"): ("range", 3386, 3387),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 121, 131),
                ConstString.image_border(1, 2): ("range", 116, 126),
                ConstString.image_border(1, 3): ("range", 214, 214),
                ConstString.image_border(1, 4): ("range", 214, 214),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 183, 185),
                ConstString.image_border(2, 2): ("range", 108, 110),
                ConstString.image_border(2, 3): ("range", 215, 216),
                ConstString.image_border(2, 4): ("range", 215, 216),
            },
        )

tests/test_images.py:529: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:89: in remove_black_border_in_image
    debug.image(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;debug_image.DebugImage object at 0x7f566a1272e0&gt;
img = array([[[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ...,
        [  0,   0, 255],
     ...[  0,   0, 255],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]]], dtype=uint8)
level = &lt;Level.DEBUG: 1&gt;

    def image(self, img: np.ndarray, level: Level) -&gt; None:
        if level &gt;= self.__level:
            name = self.name()
            self.__next()
            self.__next_when_dec[0 : self.__sub_level] = [
                True for x in range(self.__sub_level)
            ]
&gt;           if not cv2.imwrite(name, img):
E           Failed: Timeout &gt;1.0s

debug_image.py:71: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/wrong_split_line_2.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (140009764665088) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_wrong_wave_split_line_png" time="1.101"><failure message="Failed: Timeout &gt;1.0s">def test_wrong_wave_split_line_png() -&gt; None:
        """The split line by wave method was wrong."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(__file__, "wrong_wave_split_line.png"),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(90.42),
                    Angle.deg(90.54),
                ),
                ConstString.separation_double_page_y(): ("range", 2502, 2503),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(-0.16),
                    Angle.deg(-0.14),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(0.84),
                    Angle.deg(0.86),
                ),
                ConstString.image_crop(1, "x1"): ("range", 385, 385),
                ConstString.image_crop(1, "y1"): ("range", 179, 179),
                ConstString.image_crop(1, "x2"): ("range", 2411, 2411),
                ConstString.image_crop(1, "y2"): ("range", 3374, 3374),
                ConstString.image_crop(2, "x1"): ("range", 6, 124),
                ConstString.image_crop(2, "y1"): ("range", 1, 58),
                ConstString.image_crop(2, "x2"): ("range", 2405, 2489),
                ConstString.image_crop(2, "y2"): ("range", 3392, 3505),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 167, 172),
                ConstString.image_border(1, 2): ("range", 120, 124),
                ConstString.image_border(1, 3): ("range", 217, 217),
                ConstString.image_border(1, 4): ("range", 217, 217),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 0, 9),
                ConstString.image_border(2, 2): ("range", 2, 163),
                ConstString.image_border(2, 3): ("range", 9, 92),
                ConstString.image_border(2, 4): ("range", 9, 92),
            },
        )

tests/test_images.py:661: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:89: in remove_black_border_in_image
    debug.image(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;debug_image.DebugImage object at 0x7f25109bffa0&gt;
img = array([[[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ...,
        [  0,   0, 255],
     ...[  0,   0, 255],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]]], dtype=uint8)
level = &lt;Level.DEBUG: 1&gt;

    def image(self, img: np.ndarray, level: Level) -&gt; None:
        if level &gt;= self.__level:
            name = self.name()
            self.__next()
            self.__next_when_dec[0 : self.__sub_level] = [
                True for x in range(self.__sub_level)
            ]
&gt;           if not cv2.imwrite(name, img):
E           Failed: Timeout &gt;1.0s

debug_image.py:71: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/wrong_wave_split_line.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_small_wave_png" time="1.193"><failure message="Failed: Timeout &gt;1.0s">def test_small_wave_png() -&gt; None:
        """The wave at the bottom of the image is very small."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(__file__, "small_wave.png"),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(90.61),
                    Angle.deg(90.64),
                ),
                ConstString.separation_double_page_y(): ("range", 2491, 2500),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(0.69),
                    Angle.deg(0.81),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(0.69),
                    Angle.deg(0.81),
                ),
                ConstString.image_crop(1, "x1"): ("range", 322, 324),
                ConstString.image_crop(1, "y1"): ("range", 197, 199),
                ConstString.image_crop(1, "x2"): ("range", 2351, 2353),
                ConstString.image_crop(1, "y2"): ("range", 3394, 3395),
                ConstString.image_crop(2, "x1"): ("range", 130, 139),
                ConstString.image_crop(2, "y1"): ("range", 223, 224),
                ConstString.image_crop(2, "x2"): ("range", 2160, 2168),
                ConstString.image_crop(2, "y2"): ("range", 3418, 3419),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 174, 180),
                ConstString.image_border(1, 2): ("range", 112, 115),
                ConstString.image_border(1, 3): ("range", 215, 215),
                ConstString.image_border(1, 4): ("range", 215, 215),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 191, 196),
                ConstString.image_border(2, 2): ("range", 95, 102),
                ConstString.image_border(2, 3): ("range", 215, 216),
                ConstString.image_border(2, 4): ("range", 215, 216),
            },
        )

tests/test_images.py:573: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:89: in remove_black_border_in_image
    debug.image(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;debug_image.DebugImage object at 0x7f566a1272e0&gt;
img = array([[[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ...,
        [  0,   0, 255],
     ...[  0,   0, 255],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]]], dtype=uint8)
level = &lt;Level.DEBUG: 1&gt;

    def image(self, img: np.ndarray, level: Level) -&gt; None:
        if level &gt;= self.__level:
            name = self.name()
            self.__next()
            self.__next_when_dec[0 : self.__sub_level] = [
                True for x in range(self.__sub_level)
            ]
&gt;           if not cv2.imwrite(name, img):
E           Failed: Timeout &gt;1.0s

debug_image.py:71: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/small_wave.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (140009764665088) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_no_split_line_line_algo_png" time="1.002"><failure message="Failed: Timeout &gt;1.0s">def test_no_split_line_line_algo_png() -&gt; None:
        """No line for split line with line detection algo."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(
                __file__, "no_split_line_line_algo.png"
            ),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(89.46),
                    Angle.deg(89.48),
                ),
                ConstString.separation_double_page_y(): ("range", 2476, 2476),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(-0.16),
                    Angle.deg(-0.14),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(-0.46),
                    Angle.deg(-0.44),
                ),
                ConstString.image_crop(1, "x1"): ("range", 205, 205),
                ConstString.image_crop(1, "y1"): ("range", 158, 158),
                ConstString.image_crop(1, "x2"): ("range", 2320, 2320),
                ConstString.image_crop(1, "y2"): ("range", 3366, 3366),
                ConstString.image_crop(2, "x1"): ("range", 185, 185),
                ConstString.image_crop(2, "y1"): ("range", 221, 221),
                ConstString.image_crop(2, "x2"): ("range", 2201, 2201),
                ConstString.image_crop(2, "y2"): ("range", 3366, 3366),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 137, 144),
                ConstString.image_border(1, 2): ("range", 134, 142),
                ConstString.image_border(1, 3): ("range", 172, 172),
                ConstString.image_border(1, 4): ("range", 172, 172),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 215, 225),
                ConstString.image_border(2, 2): ("range", 117, 127),
                ConstString.image_border(2, 3): ("range", 222, 222),
                ConstString.image_border(2, 4): ("range", 222, 222),
            },
        )

tests/test_images.py:705: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:100: in remove_black_border_in_image
    mask_border_only = 255 * np.ones(shape=gray_bordered.shape, dtype=np.uint8)
/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/numpy/core/numeric.py:204: in ones
    multiarray.copyto(a, 1, casting='unsafe')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (array([[1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       ...,
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1]], dtype=uint8), 1)
kwargs = {'casting': 'unsafe'}
relevant_args = (array([[1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       ...,
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1]], dtype=uint8), 1, None)

&gt;   ???
E   Failed: Timeout &gt;1.0s

&lt;__array_function__ internals&gt;:5: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/no_split_line_line_algo.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_wrong_split_line_3_png" time="1.070"><failure message="Failed: Timeout &gt;1.0s">def test_wrong_split_line_3_png() -&gt; None:
        """The split line was not the right one."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(__file__, "wrong_split_line_3.png"),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(90.41),
                    Angle.deg(90.45),
                ),
                ConstString.separation_double_page_y(): ("range", 2495, 2498),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(0.29),
                    Angle.deg(0.36),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(0.89),
                    Angle.deg(0.96),
                ),
                ConstString.image_crop(1, "x1"): ("range", 331, 331),
                ConstString.image_crop(1, "y1"): ("range", 164, 165),
                ConstString.image_crop(1, "x2"): ("range", 2375, 2375),
                ConstString.image_crop(1, "y2"): ("range", 3376, 3377),
                ConstString.image_crop(2, "x1"): ("range", 102, 104),
                ConstString.image_crop(2, "y1"): ("range", 208, 209),
                ConstString.image_crop(2, "x2"): ("range", 2133, 2135),
                ConstString.image_crop(2, "y2"): ("range", 3413, 3413),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 148, 158),
                ConstString.image_border(1, 2): ("range", 116, 128),
                ConstString.image_border(1, 3): ("range", 208, 208),
                ConstString.image_border(1, 4): ("range", 208, 208),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 187, 191),
                ConstString.image_border(2, 2): ("range", 91, 95),
                ConstString.image_border(2, 3): ("range", 214, 215),
                ConstString.image_border(2, 4): ("range", 214, 215),
            },
        )

tests/test_images.py:617: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:89: in remove_black_border_in_image
    debug.image(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;debug_image.DebugImage object at 0x7f566a1272e0&gt;
img = array([[[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ...,
        [  0,   0, 255],
     ...[  0,   0, 255],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]]], dtype=uint8)
level = &lt;Level.DEBUG: 1&gt;

    def image(self, img: np.ndarray, level: Level) -&gt; None:
        if level &gt;= self.__level:
            name = self.name()
            self.__next()
            self.__next_when_dec[0 : self.__sub_level] = [
                True for x in range(self.__sub_level)
            ]
&gt;           if not cv2.imwrite(name, img):
E           Failed: Timeout &gt;1.0s

debug_image.py:71: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/wrong_split_line_3.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (140009764665088) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_failed_split_line_line_algo_png" time="1.006"><failure message="Failed: Timeout &gt;1.0s">def test_failed_split_line_line_algo_png() -&gt; None:
        """Failed to compute line for split line with line detection alog."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(
                __file__, "failed_split_line_line_algo.png"
            ),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(90.0),
                    Angle.deg(90.02),
                ),
                ConstString.separation_double_page_y(): ("range", 2573, 2576),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(-0.16),
                    Angle.deg(-0.14),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(-0.01),
                    Angle.deg(0.06),
                ),
                ConstString.image_crop(1, "x1"): ("range", 407, 407),
                ConstString.image_crop(1, "y1"): ("range", 2925, 2925),
                ConstString.image_crop(1, "x2"): ("range", 2419, 2419),
                ConstString.image_crop(1, "y2"): ("range", 3174, 3174),
                ConstString.image_crop(2, "x1"): ("range", 1180, 1185),
                ConstString.image_crop(2, "y1"): ("range", 1724, 1747),
                ConstString.image_crop(2, "x2"): ("range", 1181, 1186),
                ConstString.image_crop(2, "y2"): ("range", 1725, 1748),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 2917, 2930),
                ConstString.image_border(1, 2): ("range", 308, 321),
                ConstString.image_border(1, 3): ("range", 224, 224),
                ConstString.image_border(1, 4): ("range", 224, 224),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 1752, 1753),
                ConstString.image_border(2, 2): ("range", 1753, 1753),
                ConstString.image_border(2, 3): ("range", 1239, 1239),
                ConstString.image_border(2, 4): ("range", 1239, 1239),
            },
        )

tests/test_images.py:751: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:119: in remove_black_border_in_image
    cv2ext.insert_border_in_mask(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cnt = array([[[3402,    0]],

       [[3403,    0]],

       [[3404,    1]],

       [[3405,    1]],

       [[3406,    2]],...,   18]],

       [[4957,   19]],

       [[4958,   19]],

       [[4959,   18]],

       [[4959,    0]]], dtype=int32)
threshold2 = array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 25..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)
mask_border_only = array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 25..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)
epsilon = (5, 3.0Â°), page_angle = 0.0Â°

    def insert_border_in_mask(
        cnt: np.ndarray,
        threshold2: np.ndarray,
        mask_border_only: np.ndarray,
        epsilon: Tuple[int, Angle],
        page_angle: Angle,
    ) -&gt; None:
        __pourcentage_white_allowed__ = 0.01
        epsilon_border, epsilon_angle = epsilon
        height, width = get_hw(threshold2)
        cnt2 = cnt[cnt[:, 0, 0] &gt; epsilon_border]
        cnt3 = cnt2[cnt2[:, 0, 0] &lt; width - 1 - epsilon_border]
        cnt4 = cnt3[cnt3[:, 0, 1] &gt; epsilon_border]
        cnt5 = cnt4[cnt4[:, 0, 1] &lt; height - 1 - epsilon_border]
        if len(cnt5) == 0:
            return
        contour_approximate = cv2.approxPolyDP(cnt5, epsilon_border, True)
        all_pair = list(compute.iterator_zip_n_n_1(contour_approximate))
        all_pair_no_single_pixel = list(
            filter(
                lambda x: x[0][0][0] != x[1][0][0] or x[0][0][1] != x[1][0][1],
                all_pair,
            )
        )
        all_angles = list(
            map(
                lambda x: (
                    (x[0][0], x[1][0]),
                    compute.get_angle_0_180(x[0][0], x[1][0]),
                    np.linalg.norm(x[0][0] - x[1][0]),
                ),
                all_pair_no_single_pixel,
            )
        )
        vertical_lines = list(
            filter(
                lambda x: compute.is_angle_closed_to(
                    x[1],
                    page_angle + Angle.deg(90.0),
                    epsilon_angle,
                    Angle.deg(180),
                ),
                all_angles,
            )
        )
        horizontal_lines = list(
            filter(
                lambda x: compute.is_angle_closed_to(
                    x[1], page_angle, epsilon_angle, Angle.deg(180)
                ),
                all_angles,
            )
        )
        vertical_lines_pos = list(
            map(
                lambda x: (
                    compute.get_angle_0_180_posx_safe(x[0][0], x[0][1])[1],
                    x[1],
                ),
                vertical_lines,
            )
        )
        horizontal_lines_pos = list(
            map(
                lambda x: (
                    compute.get_angle_0_180_posy_safe(x[0][0], x[0][1])[1],
                    x[1],
                ),
                horizontal_lines,
            )
        )
        vertical_lines_pos.sort(key=lambda x: x[0])
        horizontal_lines_pos.sort(key=lambda x: x[0])
        for posx, angle in vertical_lines_pos:
            mask = np.zeros((height, width), np.uint8)
            bottom_point = compute.get_bottom_point_from_alpha_posx(
                angle, posx, height
            )
            if posx &lt; width / 2:
                pts = np.array(
                    [
                        [-1, 0],
                        [posx - 1, 0],
                        [bottom_point[0] - 1, bottom_point[1]],
                        [-1, height - 1],
                    ]
                )
            else:
                pts = np.array(
                    [
                        [width, 0],
                        [posx + 1, 0],
                        [bottom_point[0] + 1, bottom_point[1]],
                        [width, height - 1],
                    ]
                )
            mask = cv2.drawContours(mask, [pts], 0, 255, -1)
            histogram = cv2.calcHist([threshold2], [0], mask, [2], [0, 256])
            if __pourcentage_white_allowed__ * histogram[0] &gt; sum(
                histogram[1:]
            ) or __pourcentage_white_allowed__ * histogram[-1] &gt; sum(
                histogram[:-1]
            ):
                mask_border_only = cv2.drawContours(
                    mask_border_only, [pts], 0, (0), -1
                )
        for posy, angle in horizontal_lines_pos:
            mask = np.zeros((height, width), np.uint8)
            bottom_point = compute.get_right_point_from_alpha_posy(
                angle, posy, width
            )
            if posy &lt; height / 2:
                pts = np.array(
                    [
                        [0, -1],
                        [0, posy - 1],
                        [bottom_point[0], bottom_point[1] - 1],
                        [width - 1, -1],
                    ]
                )
            else:
                pts = np.array(
                    [
                        [0, height],
                        [0, posy + 1],
                        [bottom_point[0], bottom_point[1] + 1],
                        [width - 1, height],
                    ]
                )
            mask = cv2.drawContours(mask, [pts], 0, 255, -1)
&gt;           histogram = cv2.calcHist([threshold2], [0], mask, [2], [0, 256])
E           Failed: Timeout &gt;1.0s

cv2ext.py:811: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/failed_split_line_line_algo.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_crop_too_much_3_png" time="1.057"><failure message="Failed: Timeout &gt;1.0s">def test_crop_too_much_3_png() -&gt; None:
        """Failed to compute line for split line with line detection alog."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(__file__, "crop_too_much_3.png"),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(89.51),
                    Angle.deg(89.56),
                ),
                ConstString.separation_double_page_y(): ("range", 2494, 2499),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(-0.96),
                    Angle.deg(-0.89),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(-0.16),
                    Angle.deg(-0.14),
                ),
                ConstString.image_crop(1, "x1"): ("range", 373, 374),
                ConstString.image_crop(1, "y1"): ("range", 258, 258),
                ConstString.image_crop(1, "x2"): ("range", 2385, 2386),
                ConstString.image_crop(1, "y2"): ("range", 3458, 3459),
                ConstString.image_crop(2, "x1"): ("range", 167, 172),
                ConstString.image_crop(2, "y1"): ("range", 228, 228),
                ConstString.image_crop(2, "x2"): ("range", 2180, 2185),
                ConstString.image_crop(2, "y2"): ("range", 3417, 3417),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 237, 239),
                ConstString.image_border(1, 2): ("range", 46, 50),
                ConstString.image_border(1, 3): ("range", 223, 224),
                ConstString.image_border(1, 4): ("range", 223, 224),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 192, 214),
                ConstString.image_border(2, 2): ("range", 84, 106),
                ConstString.image_border(2, 3): ("range", 223, 223),
                ConstString.image_border(2, 4): ("range", 223, 223),
            },
        )

tests/test_images.py:843: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:89: in remove_black_border_in_image
    debug.image(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;debug_image.DebugImage object at 0x7f566a1272e0&gt;
img = array([[[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ...,
        [  0,   0, 255],
     ...[  0,   0, 255],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]]], dtype=uint8)
level = &lt;Level.DEBUG: 1&gt;

    def image(self, img: np.ndarray, level: Level) -&gt; None:
        if level &gt;= self.__level:
            name = self.name()
            self.__next()
            self.__next_when_dec[0 : self.__sub_level] = [
                True for x in range(self.__sub_level)
            ]
&gt;           if not cv2.imwrite(name, img):
E           Failed: Timeout &gt;1.0s

debug_image.py:71: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/crop_too_much_3.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (140009764665088) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_failed_split_line_line_algo_2_png" time="1.049"><failure message="Failed: Timeout &gt;1.0s">def test_failed_split_line_line_algo_2_png() -&gt; None:
        """Failed to compute line for split line with line detection alog."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(
                __file__, "failed_split_line_line_algo_2.png"
            ),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(89.97),
                    Angle.deg(90.05),
                ),
                ConstString.separation_double_page_y(): ("range", 2497, 2499),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(-0.01),
                    Angle.deg(0.01),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(0.59),
                    Angle.deg(0.61),
                ),
                ConstString.image_crop(1, "x1"): ("range", 272, 272),
                ConstString.image_crop(1, "y1"): ("range", 149, 149),
                ConstString.image_crop(1, "x2"): ("range", 2383, 2383),
                ConstString.image_crop(1, "y2"): ("range", 3353, 3353),
                ConstString.image_crop(2, "x1"): ("range", 107, 124),
                ConstString.image_crop(2, "y1"): ("range", 155, 155),
                ConstString.image_crop(2, "x2"): ("range", 2230, 2247),
                ConstString.image_crop(2, "y2"): ("range", 3350, 3350),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 137, 139),
                ConstString.image_border(1, 2): ("range", 144, 146),
                ConstString.image_border(1, 3): ("range", 174, 174),
                ConstString.image_border(1, 4): ("range", 174, 174),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 135, 146),
                ConstString.image_border(2, 2): ("range", 145, 157),
                ConstString.image_border(2, 3): ("range", 168, 168),
                ConstString.image_border(2, 4): ("range", 168, 168),
            },
        )

tests/test_images.py:797: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:89: in remove_black_border_in_image
    debug.image(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;debug_image.DebugImage object at 0x7f25109bffa0&gt;
img = array([[[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ...,
        [  0,   0, 255],
     ...[  0,   0, 255],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]]], dtype=uint8)
level = &lt;Level.DEBUG: 1&gt;

    def image(self, img: np.ndarray, level: Level) -&gt; None:
        if level &gt;= self.__level:
            name = self.name()
            self.__next()
            self.__next_when_dec[0 : self.__sub_level] = [
                True for x in range(self.__sub_level)
            ]
&gt;           if not cv2.imwrite(name, img):
E           Failed: Timeout &gt;1.0s

debug_image.py:71: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/failed_split_line_line_algo_2.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_wrong_wave_split_line_2_png" time="1.034"><failure message="Failed: Timeout &gt;1.0s">def test_wrong_wave_split_line_2_png() -&gt; None:
        """Need to relax tolerance to have the split line by wave algo."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(
                __file__, "wrong_wave_split_line_2.png"
            ),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(90.77),
                    Angle.deg(90.78),
                ),
                ConstString.separation_double_page_y(): ("range", 2490, 2490),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(0.39),
                    Angle.deg(0.41),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(1.79),
                    Angle.deg(1.81),
                ),
                ConstString.image_crop(1, "x1"): ("range", 224, 224),
                ConstString.image_crop(1, "y1"): ("range", 147, 147),
                ConstString.image_crop(1, "x2"): ("range", 2337, 2337),
                ConstString.image_crop(1, "y2"): ("range", 3355, 3355),
                ConstString.image_crop(2, "x1"): ("range", 72, 107),
                ConstString.image_crop(2, "y1"): ("range", 197, 197),
                ConstString.image_crop(2, "x2"): ("range", 2194, 2229),
                ConstString.image_crop(2, "y2"): ("range", 3396, 3396),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 126, 137),
                ConstString.image_border(1, 2): ("range", 142, 153),
                ConstString.image_border(1, 3): ("range", 173, 173),
                ConstString.image_border(1, 4): ("range", 173, 173),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 167, 171),
                ConstString.image_border(2, 2): ("range", 116, 121),
                ConstString.image_border(2, 3): ("range", 169, 169),
                ConstString.image_border(2, 4): ("range", 169, 169),
            },
        )

tests/test_images.py:887: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:89: in remove_black_border_in_image
    debug.image(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;debug_image.DebugImage object at 0x7f566a1272e0&gt;
img = array([[[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ...,
        [  0,   0, 255],
     ...[  0,   0, 255],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]]], dtype=uint8)
level = &lt;Level.DEBUG: 1&gt;

    def image(self, img: np.ndarray, level: Level) -&gt; None:
        if level &gt;= self.__level:
            name = self.name()
            self.__next()
            self.__next_when_dec[0 : self.__sub_level] = [
                True for x in range(self.__sub_level)
            ]
&gt;           if not cv2.imwrite(name, img):
E           Failed: Timeout &gt;1.0s

debug_image.py:71: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/wrong_wave_split_line_2.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (140009764665088) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_wrong_wave_split_line_3_png" time="1.009"><failure message="Failed: Timeout &gt;1.0s">def test_wrong_wave_split_line_3_png() -&gt; None:
        """Need to relax tolerance to have the split line by wave algo."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(
                __file__, "wrong_wave_split_line_3.png"
            ),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(90.03),
                    Angle.deg(90.09),
                ),
                ConstString.separation_double_page_y(): ("range", 2510, 2514),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(0.04),
                    Angle.deg(0.11),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(0.29),
                    Angle.deg(0.36),
                ),
                ConstString.image_crop(1, "x1"): ("range", 272, 273),
                ConstString.image_crop(1, "y1"): ("range", 219, 220),
                ConstString.image_crop(1, "x2"): ("range", 2383, 2383),
                ConstString.image_crop(1, "y2"): ("range", 3423, 3423),
                ConstString.image_crop(2, "x1"): ("range", 114, 119),
                ConstString.image_crop(2, "y1"): ("range", 226, 226),
                ConstString.image_crop(2, "x2"): ("range", 2235, 2240),
                ConstString.image_crop(2, "y2"): ("range", 3413, 3414),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 190, 202),
                ConstString.image_border(1, 2): ("range", 81, 93),
                ConstString.image_border(1, 3): ("range", 174, 175),
                ConstString.image_border(1, 4): ("range", 174, 175),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 190, 207),
                ConstString.image_border(2, 2): ("range", 92, 110),
                ConstString.image_border(2, 3): ("range", 168, 169),
                ConstString.image_border(2, 4): ("range", 168, 169),
            },
        )

tests/test_images.py:933: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:89: in remove_black_border_in_image
    debug.image(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;debug_image.DebugImage object at 0x7f25109bffa0&gt;
img = array([[[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ...,
        [  0,   0, 255],
     ...[255, 255, 255],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]]], dtype=uint8)
level = &lt;Level.DEBUG: 1&gt;

    def image(self, img: np.ndarray, level: Level) -&gt; None:
        if level &gt;= self.__level:
            name = self.name()
            self.__next()
            self.__next_when_dec[0 : self.__sub_level] = [
                True for x in range(self.__sub_level)
            ]
&gt;           if not cv2.imwrite(name, img):
E           Failed: Timeout &gt;1.0s

debug_image.py:71: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/wrong_wave_split_line_3.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_no_split_line_wave_algo_png" time="1.176"><failure message="Failed: Timeout &gt;1.0s">def test_no_split_line_wave_algo_png() -&gt; None:
        """Failed to detect wave due to image."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(
                __file__, "no_split_line_wave_algo.png"
            ),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(89.84),
                    Angle.deg(89.94),
                ),
                ConstString.separation_double_page_y(): ("range", 2475, 2484),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(-0.06),
                    Angle.deg(0.01),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(-0.56),
                    Angle.deg(-0.49),
                ),
                ConstString.image_crop(1, "x1"): ("range", 97, 101),
                ConstString.image_crop(1, "y1"): ("range", 27, 79),
                ConstString.image_crop(1, "x2"): ("range", 2477, 2486),
                ConstString.image_crop(1, "y2"): ("range", 3505, 3505),
                ConstString.image_crop(2, "x1"): ("range", 163, 171),
                ConstString.image_crop(2, "y1"): ("range", 266, 266),
                ConstString.image_crop(2, "x2"): ("range", 2238, 2248),
                ConstString.image_crop(2, "y2"): ("range", 3381, 3382),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 15, 41),
                ConstString.image_border(1, 2): ("range", 15, 41),
                ConstString.image_border(1, 3): ("range", 46, 52),
                ConstString.image_border(1, 4): ("range", 46, 52),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 254, 258),
                ConstString.image_border(2, 2): ("range", 114, 118),
                ConstString.image_border(2, 3): ("range", 191, 198),
                ConstString.image_border(2, 4): ("range", 191, 198),
            },
        )

tests/test_images.py:979: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:89: in remove_black_border_in_image
    debug.image(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;debug_image.DebugImage object at 0x7f566a1272e0&gt;
img = array([[[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ...,
        [  0,   0, 255],
     ...[  0,   0, 255],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]]], dtype=uint8)
level = &lt;Level.DEBUG: 1&gt;

    def image(self, img: np.ndarray, level: Level) -&gt; None:
        if level &gt;= self.__level:
            name = self.name()
            self.__next()
            self.__next_when_dec[0 : self.__sub_level] = [
                True for x in range(self.__sub_level)
            ]
&gt;           if not cv2.imwrite(name, img):
E           Failed: Timeout &gt;1.0s

debug_image.py:71: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/no_split_line_wave_algo.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (140009764665088) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_no_split_line_wave_algo_2_png" time="1.000"><failure message="Failed: Timeout &gt;1.0s">def test_no_split_line_wave_algo_2_png() -&gt; None:
        """Failed to detect wave due to missing wave at the bottom."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(
                __file__, "no_split_line_wave_algo_2.png"
            ),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(90.47),
                    Angle.deg(91.22),
                ),
                ConstString.separation_double_page_y(): ("range", 2478, 2488),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(1.09),
                    Angle.deg(1.16),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(0.19),
                    Angle.deg(0.21),
                ),
                ConstString.image_crop(1, "x1"): ("range", 266, 266),
                ConstString.image_crop(1, "y1"): ("range", 209, 210),
                ConstString.image_crop(1, "x2"): ("range", 2342, 2342),
                ConstString.image_crop(1, "y2"): ("range", 3413, 3413),
                ConstString.image_crop(2, "x1"): ("range", 163, 199),
                ConstString.image_crop(2, "y1"): ("range", 241, 241),
                ConstString.image_crop(2, "x2"): ("range", 2246, 2282),
                ConstString.image_crop(2, "y2"): ("range", 3433, 3433),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 180, 194),
                ConstString.image_border(1, 2): ("range", 90, 103),
                ConstString.image_border(1, 3): ("range", 192, 192),
                ConstString.image_border(1, 4): ("range", 192, 192),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 209, 226),
                ConstString.image_border(2, 2): ("range", 69, 86),
                ConstString.image_border(2, 3): ("range", 188, 188),
                ConstString.image_border(2, 4): ("range", 188, 188),
            },
        )

tests/test_images.py:1025: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:109: in remove_black_border_in_image
    ) = cv2ext.find_longest_lines_in_border(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

shape = (3507, 4960), epsilon = 5
cnt = array([[[ 484, 2176]],

       [[ 484, 2177]],

       [[ 485, 2177]],

       [[ 486, 2178]],

       [[ 487, 2178]],..., 2178]],

       [[ 490, 2178]],

       [[ 489, 2177]],

       [[ 488, 2177]],

       [[ 487, 2176]]], dtype=int32)

    def find_longest_lines_in_border(
        shape: Tuple[int, int], epsilon: int, cnt: np.ndarray
    ) -&gt; Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int], Tuple[int, int]]:
        height, width = shape
        left_top = height
        left_bottom = 0
        right_top = height
        right_bottom = 0
        top_left = width
        top_right = 0
        bottom_left = width
        bottom_right = 0
        for pt1, pt2 in compute.iterator_zip_n_n_1(cnt):
            point1_x, point1_y = pt1[0]
            point2_x, point2_y = pt2[0]
            if point1_x &lt;= epsilon and point2_x &lt;= epsilon:
                left_top = min(left_top, point1_y, point2_y)
                left_bottom = max(left_bottom, point1_y, point2_y)
            if point1_y &lt;= epsilon and point2_y &lt;= epsilon:
                top_left = min(top_left, point1_x, point2_x)
                top_right = max(top_right, point1_x, point2_x)
&gt;           if point1_x &gt;= width - 1 - epsilon and point2_x &gt;= width - 1 - epsilon:
E           Failed: Timeout &gt;1.0s

cv2ext.py:664: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/no_split_line_wave_algo_2.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_crop_too_few_2_png" time="1.012"><failure message="Failed: Timeout &gt;1.0s">def test_crop_too_few_2_png() -&gt; None:
        """Use different area on the left and the right to detect
        black noise."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(__file__, "crop_too_few_2.png"),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(90.25),
                    Angle.deg(90.35),
                ),
                ConstString.separation_double_page_y(): ("range", 2531, 2534),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(1.19),
                    Angle.deg(1.21),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(-0.11),
                    Angle.deg(-0.04),
                ),
                ConstString.image_crop(1, "x1"): ("range", 287, 287),
                ConstString.image_crop(1, "y1"): ("range", 165, 165),
                ConstString.image_crop(1, "x2"): ("range", 2398, 2398),
                ConstString.image_crop(1, "y2"): ("range", 3368, 3368),
                ConstString.image_crop(2, "x1"): ("range", 145, 151),
                ConstString.image_crop(2, "y1"): ("range", 175, 189),
                ConstString.image_crop(2, "x2"): ("range", 2271, 2275),
                ConstString.image_crop(2, "y2"): ("range", 3373, 3386),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 139, 157),
                ConstString.image_border(1, 2): ("range", 127, 145),
                ConstString.image_border(1, 3): ("range", 174, 174),
                ConstString.image_border(1, 4): ("range", 174, 174),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 175, 181),
                ConstString.image_border(2, 2): ("range", 109, 114),
                ConstString.image_border(2, 3): ("range", 167, 168),
                ConstString.image_border(2, 4): ("range", 167, 168),
            },
        )

tests/test_images.py:1072: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:119: in remove_black_border_in_image
    cv2ext.insert_border_in_mask(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cnt = array([[[2443,    0]],

       [[2443,    4]],

       [[2444,    3]],

       [[2445,    3]],

       [[2446,    4]],...,   39]],

       [[4951,   39]],

       [[4959,   47]],

       [[4959,   50]],

       [[4959,    0]]], dtype=int32)
threshold2 = array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 25..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)
mask_border_only = array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 25..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)
epsilon = (5, 3.0Â°), page_angle = 0.0Â°

    def insert_border_in_mask(
        cnt: np.ndarray,
        threshold2: np.ndarray,
        mask_border_only: np.ndarray,
        epsilon: Tuple[int, Angle],
        page_angle: Angle,
    ) -&gt; None:
        __pourcentage_white_allowed__ = 0.01
        epsilon_border, epsilon_angle = epsilon
        height, width = get_hw(threshold2)
        cnt2 = cnt[cnt[:, 0, 0] &gt; epsilon_border]
        cnt3 = cnt2[cnt2[:, 0, 0] &lt; width - 1 - epsilon_border]
        cnt4 = cnt3[cnt3[:, 0, 1] &gt; epsilon_border]
        cnt5 = cnt4[cnt4[:, 0, 1] &lt; height - 1 - epsilon_border]
        if len(cnt5) == 0:
            return
        contour_approximate = cv2.approxPolyDP(cnt5, epsilon_border, True)
        all_pair = list(compute.iterator_zip_n_n_1(contour_approximate))
        all_pair_no_single_pixel = list(
            filter(
                lambda x: x[0][0][0] != x[1][0][0] or x[0][0][1] != x[1][0][1],
                all_pair,
            )
        )
        all_angles = list(
            map(
                lambda x: (
                    (x[0][0], x[1][0]),
                    compute.get_angle_0_180(x[0][0], x[1][0]),
                    np.linalg.norm(x[0][0] - x[1][0]),
                ),
                all_pair_no_single_pixel,
            )
        )
        vertical_lines = list(
            filter(
                lambda x: compute.is_angle_closed_to(
                    x[1],
                    page_angle + Angle.deg(90.0),
                    epsilon_angle,
                    Angle.deg(180),
                ),
                all_angles,
            )
        )
        horizontal_lines = list(
            filter(
                lambda x: compute.is_angle_closed_to(
                    x[1], page_angle, epsilon_angle, Angle.deg(180)
                ),
                all_angles,
            )
        )
        vertical_lines_pos = list(
            map(
                lambda x: (
                    compute.get_angle_0_180_posx_safe(x[0][0], x[0][1])[1],
                    x[1],
                ),
                vertical_lines,
            )
        )
        horizontal_lines_pos = list(
            map(
                lambda x: (
                    compute.get_angle_0_180_posy_safe(x[0][0], x[0][1])[1],
                    x[1],
                ),
                horizontal_lines,
            )
        )
        vertical_lines_pos.sort(key=lambda x: x[0])
        horizontal_lines_pos.sort(key=lambda x: x[0])
        for posx, angle in vertical_lines_pos:
            mask = np.zeros((height, width), np.uint8)
            bottom_point = compute.get_bottom_point_from_alpha_posx(
                angle, posx, height
            )
            if posx &lt; width / 2:
                pts = np.array(
                    [
                        [-1, 0],
                        [posx - 1, 0],
                        [bottom_point[0] - 1, bottom_point[1]],
                        [-1, height - 1],
                    ]
                )
            else:
                pts = np.array(
                    [
                        [width, 0],
                        [posx + 1, 0],
                        [bottom_point[0] + 1, bottom_point[1]],
                        [width, height - 1],
                    ]
                )
            mask = cv2.drawContours(mask, [pts], 0, 255, -1)
            histogram = cv2.calcHist([threshold2], [0], mask, [2], [0, 256])
            if __pourcentage_white_allowed__ * histogram[0] &gt; sum(
                histogram[1:]
            ) or __pourcentage_white_allowed__ * histogram[-1] &gt; sum(
                histogram[:-1]
            ):
                mask_border_only = cv2.drawContours(
                    mask_border_only, [pts], 0, (0), -1
                )
        for posy, angle in horizontal_lines_pos:
            mask = np.zeros((height, width), np.uint8)
            bottom_point = compute.get_right_point_from_alpha_posy(
                angle, posy, width
            )
            if posy &lt; height / 2:
                pts = np.array(
                    [
                        [0, -1],
                        [0, posy - 1],
                        [bottom_point[0], bottom_point[1] - 1],
                        [width - 1, -1],
                    ]
                )
            else:
                pts = np.array(
                    [
                        [0, height],
                        [0, posy + 1],
                        [bottom_point[0], bottom_point[1] + 1],
                        [width - 1, height],
                    ]
                )
            mask = cv2.drawContours(mask, [pts], 0, 255, -1)
&gt;           histogram = cv2.calcHist([threshold2], [0], mask, [2], [0, 256])
E           Failed: Timeout &gt;1.0s

cv2ext.py:811: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/crop_too_few_2.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (140009764665088) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_failed_detect_rectangle_png" time="1.029"><failure message="Failed: Timeout &gt;1.0s">def test_failed_detect_rectangle_png() -&gt; None:
        """Before, approxPolyDP algo was used to detect shape.
    
        But, due to noise on the edge with background other pages,
        the contour have lost of noise.
        So use HoughLinesP to detect shape."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(
                __file__, "failed_detect_rectangle.png"
            ),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(90.19),
                    Angle.deg(90.23),
                ),
                ConstString.separation_double_page_y(): ("range", 2471, 2474),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(0.19),
                    Angle.deg(0.21),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(0.19),
                    Angle.deg(0.21),
                ),
                ConstString.image_crop(1, "x1"): ("range", 257, 257),
                ConstString.image_crop(1, "y1"): ("range", 201, 201),
                ConstString.image_crop(1, "x2"): ("range", 2333, 2333),
                ConstString.image_crop(1, "y2"): ("range", 3402, 3402),
                ConstString.image_crop(2, "x1"): ("range", 136, 139),
                ConstString.image_crop(2, "y1"): ("range", 215, 215),
                ConstString.image_crop(2, "x2"): ("range", 2219, 2222),
                ConstString.image_crop(2, "y2"): ("range", 3406, 3406),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 188, 188),
                ConstString.image_border(1, 2): ("range", 97, 98),
                ConstString.image_border(1, 3): ("range", 192, 192),
                ConstString.image_border(1, 4): ("range", 192, 192),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 200, 201),
                ConstString.image_border(2, 2): ("range", 95, 95),
                ConstString.image_border(2, 3): ("range", 188, 188),
                ConstString.image_border(2, 4): ("range", 188, 188),
            },
        )

tests/test_images.py:1120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:89: in remove_black_border_in_image
    debug.image(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;debug_image.DebugImage object at 0x7f25109bffa0&gt;
img = array([[[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ...,
        [  0,   0, 255],
     ...[255, 255, 255],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]]], dtype=uint8)
level = &lt;Level.DEBUG: 1&gt;

    def image(self, img: np.ndarray, level: Level) -&gt; None:
        if level &gt;= self.__level:
            name = self.name()
            self.__next()
            self.__next_when_dec[0 : self.__sub_level] = [
                True for x in range(self.__sub_level)
            ]
&gt;           if not cv2.imwrite(name, img):
E           Failed: Timeout &gt;1.0s

debug_image.py:71: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/failed_detect_rectangle.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_single_page_png" time="1.009"><failure message="Failed: Timeout &gt;1.0s">def test_single_page_png() -&gt; None:
        """Detect that the scan is single page."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(__file__, "single_page.png"),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(89.97),
                    Angle.deg(90.06),
                ),
                ConstString.separation_double_page_y(): ("range", 2469, 2476),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(-0.01),
                    Angle.deg(0.01),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(-0.01),
                    Angle.deg(0.01),
                ),
                ConstString.image_crop(1, "x1"): ("range", 1, 1),
                ConstString.image_crop(1, "y1"): ("range", 8, 9),
                ConstString.image_crop(1, "x2"): ("range", 2464, 2470),
                ConstString.image_crop(1, "y2"): ("range", 3505, 3505),
                ConstString.image_crop(2, "x1"): ("range", 0, 0),
                ConstString.image_crop(2, "y1"): ("range", 0, 0),
                ConstString.image_crop(2, "x2"): ("range", 0, 0),
                ConstString.image_crop(2, "y2"): ("range", 0, 0),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 5, 6),
                ConstString.image_border(1, 2): ("range", 5, 6),
                ConstString.image_border(1, 3): ("range", 6, 9),
                ConstString.image_border(1, 4): ("range", 6, 9),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 0, 0),
                ConstString.image_border(2, 2): ("range", 0, 0),
                ConstString.image_border(2, 3): ("range", 0, 0),
                ConstString.image_border(2, 4): ("range", 0, 0),
            },
        )

tests/test_images.py:1166: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:149: in find_images
    mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:81: in remove_black_border_in_image
    thresholdi = cv2ext.threshold_from_gaussian_histogram_black(gray_bordered)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = array([[122, 121, 121, ...,  19,  19,  18],
       [127, 126, 126, ...,  19,  19,  18],
       [131, 131, 131, ...,  1...,   4,   4,   4],
       [156, 156, 156, ...,   4,   4,   4],
       [156, 156, 156, ...,   4,   4,   4]], dtype=uint8)
blur_kernel_size = 31

    def threshold_from_gaussian_histogram_black(
        image: np.ndarray, blur_kernel_size: int = 31
    ) -&gt; int:
&gt;       histogram = cv2.calcHist([image], [0], None, [256], [0, 256])
E       Failed: Timeout &gt;1.0s

cv2ext.py:883: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/single_page.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (140009764665088) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_no_split_line_wave_algo_3_png" time="1.001"><failure message="Failed: Timeout &gt;1.0s">def test_no_split_line_wave_algo_3_png() -&gt; None:
        """Failed to detect wave due to missing wave at the bottom."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(
                __file__, "no_split_line_wave_algo_3.png"
            ),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(90.16),
                    Angle.deg(90.21),
                ),
                ConstString.separation_double_page_y(): ("range", 2403, 2408),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(-0.01),
                    Angle.deg(0.16),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(-0.01),
                    Angle.deg(0.16),
                ),
                ConstString.image_crop(1, "x1"): ("range", 184, 188),
                ConstString.image_crop(1, "y1"): ("range", 2957, 2959),
                ConstString.image_crop(1, "x2"): ("range", 2201, 2205),
                ConstString.image_crop(1, "y2"): ("range", 3201, 3202),
                ConstString.image_crop(2, "x1"): ("range", 0, 0),
                ConstString.image_crop(2, "y1"): ("range", 0, 0),
                ConstString.image_crop(2, "x2"): ("range", 0, 0),
                ConstString.image_crop(2, "y2"): ("range", 0, 0),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 2950, 2956),
                ConstString.image_border(1, 2): ("range", 289, 292),
                ConstString.image_border(1, 3): ("range", 221, 221),
                ConstString.image_border(1, 4): ("range", 221, 221),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 0, 0),
                ConstString.image_border(2, 2): ("range", 0, 0),
                ConstString.image_border(2, 3): ("range", 0, 0),
                ConstString.image_border(2, 4): ("range", 0, 0),
            },
        )

tests/test_images.py:1210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
page/find_images.py:155: in find_images
    debug.image(blurimg_bc2, DebugImage.Level.DEBUG)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;debug_image.DebugImage object at 0x7f25109bffa0&gt;
img = array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 25..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)
level = &lt;Level.DEBUG: 1&gt;

    def image(self, img: np.ndarray, level: Level) -&gt; None:
        if level &gt;= self.__level:
            name = self.name()
            self.__next()
            self.__next_when_dec[0 : self.__sub_level] = [
                True for x in range(self.__sub_level)
            ]
&gt;           if not cv2.imwrite(name, img):
E           Failed: Timeout &gt;1.0s

debug_image.py:71: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/no_split_line_wave_algo_3.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_wrong_split_line_4_png" time="1.016"><failure message="Failed: Timeout &gt;1.0s">def test_wrong_split_line_4_png() -&gt; None:
        """Detect wrong split line with line algo."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(
                __file__, "wrong_split_line_4.png"
            ),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(91.04),
                    Angle.deg(91.06),
                ),
                ConstString.separation_double_page_y(): ("range", 60, 60),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(1.04),
                    Angle.deg(1.06),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(1.14),
                    Angle.deg(1.16),
                ),
                ConstString.image_crop(1, "x1"): ("range", 0, 0),
                ConstString.image_crop(1, "y1"): ("range", 0, 0),
                ConstString.image_crop(1, "x2"): ("range", 0, 0),
                ConstString.image_crop(1, "y2"): ("range", 0, 0),
                ConstString.image_crop(2, "x1"): ("range", 292, 292),
                ConstString.image_crop(2, "y1"): ("range", 330, 330),
                ConstString.image_crop(2, "x2"): ("range", 2314, 2314),
                ConstString.image_crop(2, "y2"): ("range", 3218, 3218),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 0, 0),
                ConstString.image_border(1, 2): ("range", 0, 0),
                ConstString.image_border(1, 3): ("range", 0, 0),
                ConstString.image_border(1, 4): ("range", 0, 0),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 322, 322),
                ConstString.image_border(2, 2): ("range", 277, 277),
                ConstString.image_border(2, 3): ("range", 219, 219),
                ConstString.image_border(2, 4): ("range", 219, 219),
            },
        )

tests/test_images.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 25..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)
param = &lt;page.find_images.FindImageParameters object at 0x7f566a04dee0&gt;
page_angle = 0.0Â°, debug = &lt;debug_image.DebugImage object at 0x7f566a1272e0&gt;

    @inc_debug
    def find_images(
        image: np.ndarray,
        param: FindImageParameters,
        page_angle: Optional[Angle],
        debug: DebugImage,
    ) -&gt; np.ndarray:
        __internal_border__ = 20
        xxx = 7
    
        debug.image(image, DebugImage.Level.DEBUG)
        gray = cv2ext.force_image_to_be_grayscale(image, (xxx, xxx))
        debug.image(gray, DebugImage.Level.DEBUG)
        blurimg_bc = cv2ext.erode_and_dilate(gray, (xxx, xxx), xxx)
        debug.image(blurimg_bc, DebugImage.Level.DEBUG)
    
        if page_angle is not None:
            mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
            image_no_border = cv2ext.apply_mask(image, mask)
            debug.image(image_no_border, DebugImage.Level.DEBUG)
            gray2 = cv2ext.force_image_to_be_grayscale(image_no_border, (xxx, xxx))
            debug.image(gray2, DebugImage.Level.DEBUG)
            blurimg_bc2 = cv2ext.erode_and_dilate(gray2, (xxx, xxx), xxx, True)
            debug.image(blurimg_bc2, DebugImage.Level.DEBUG)
            gray_no_border = blurimg_bc2
        else:
            gray_no_border = blurimg_bc
        gray_bordered = cv2.copyMakeBorder(
            gray_no_border,
            __internal_border__,
            __internal_border__,
            __internal_border__,
            __internal_border__,
            cv2.BORDER_CONSTANT,
            value=[255],
        )
        debug.image(gray_bordered, DebugImage.Level.DEBUG)
        dilated = cv2.dilate(
            gray_bordered,
            cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (xxx, xxx)),
        )
        debug.image(dilated, DebugImage.Level.DEBUG)
        thresholdi = cv2ext.threshold_from_gaussian_histogram_white(dilated)
        _, threshold = cv2.threshold(
            dilated, thresholdi, 255, cv2.THRESH_BINARY_INV
        )
        debug.image(threshold, DebugImage.Level.DEBUG)
    
&gt;       morpho1 = cv2.morphologyEx(
            threshold,
            cv2.MORPH_CLOSE,
            cv2.getStructuringElement(
                cv2.MORPH_ELLIPSE, param.kernel_morphology_size
            ),
        )
E       Failed: Timeout &gt;1.0s

page/find_images.py:180: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/wrong_split_line_4.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (140009764665088) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase><testcase classname="tests.test_images" name="test_failed_split_line_line_algo_3_png" time="1.038"><failure message="Failed: Timeout &gt;1.0s">def test_failed_split_line_line_algo_3_png() -&gt; None:
        """get_rectangle_from_contour_hough_lines fails
        because fewer than 4 lines are detected."""
&gt;       treat_file(
            MockDisableSeparatePage(MAX_VAL),
            get_absolute_from_current_path(
                __file__, "failed_split_line_line_algo_3.png"
            ),
            {
                ConstString.separation_double_page_angle(): (
                    "range",
                    Angle.deg(89.99),
                    Angle.deg(90.01),
                ),
                ConstString.separation_double_page_y(): ("range", 40, 40),
                ConstString.page_rotation(1): (
                    "range",
                    Angle.deg(-0.01),
                    Angle.deg(0.01),
                ),
                ConstString.page_rotation(2): (
                    "range",
                    Angle.deg(-0.01),
                    Angle.deg(0.01),
                ),
                ConstString.image_crop(1, "x1"): ("range", 0, 0),
                ConstString.image_crop(1, "y1"): ("range", 0, 0),
                ConstString.image_crop(1, "x2"): ("range", 0, 0),
                ConstString.image_crop(1, "y2"): ("range", 0, 0),
                ConstString.image_crop(2, "x1"): ("range", 246, 246),
                ConstString.image_crop(2, "y1"): ("range", 154, 154),
                ConstString.image_crop(2, "x2"): ("range", 2259, 2259),
                ConstString.image_crop(2, "y2"): ("range", 3361, 3361),
                ConstString.image_dpi(1): ("difference", 300, 0.0000001),
                ConstString.image_border(1, 1): ("range", 0, 0),
                ConstString.image_border(1, 2): ("range", 0, 0),
                ConstString.image_border(1, 3): ("range", 0, 0),
                ConstString.image_border(1, 4): ("range", 0, 0),
                ConstString.image_dpi(2): ("difference", 300, 0.0000001),
                ConstString.image_border(2, 1): ("range", 146, 146),
                ConstString.image_border(2, 2): ("range", 134, 134),
                ConstString.image_border(2, 3): ("range", 223, 223),
                ConstString.image_border(2, 4): ("range", 223, 223),
            },
        )

tests/test_images.py:1303: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
script.py:372: in treat_file
    sep.treat_file(
script.py:298: in treat_file
    image1, image2 = self.split_two_waves(
tests/mock_separate_page.py:23: in split_two_waves
    return super().split_two_waves(image, parameters, debug)
script.py:36: in split_two_waves
    self.__images_found = page.find_images.find_images(
debug_image.py:97: in wrapper
    return function_to_decorate(*args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 25..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)
param = &lt;page.find_images.FindImageParameters object at 0x7f250f497be0&gt;
page_angle = 0.0Â°, debug = &lt;debug_image.DebugImage object at 0x7f25109bffa0&gt;

    @inc_debug
    def find_images(
        image: np.ndarray,
        param: FindImageParameters,
        page_angle: Optional[Angle],
        debug: DebugImage,
    ) -&gt; np.ndarray:
        __internal_border__ = 20
        xxx = 7
    
        debug.image(image, DebugImage.Level.DEBUG)
        gray = cv2ext.force_image_to_be_grayscale(image, (xxx, xxx))
        debug.image(gray, DebugImage.Level.DEBUG)
        blurimg_bc = cv2ext.erode_and_dilate(gray, (xxx, xxx), xxx)
        debug.image(blurimg_bc, DebugImage.Level.DEBUG)
    
        if page_angle is not None:
            mask = remove_black_border_in_image(blurimg_bc, page_angle, debug)
            image_no_border = cv2ext.apply_mask(image, mask)
            debug.image(image_no_border, DebugImage.Level.DEBUG)
            gray2 = cv2ext.force_image_to_be_grayscale(image_no_border, (xxx, xxx))
            debug.image(gray2, DebugImage.Level.DEBUG)
            blurimg_bc2 = cv2ext.erode_and_dilate(gray2, (xxx, xxx), xxx, True)
            debug.image(blurimg_bc2, DebugImage.Level.DEBUG)
            gray_no_border = blurimg_bc2
        else:
            gray_no_border = blurimg_bc
        gray_bordered = cv2.copyMakeBorder(
            gray_no_border,
            __internal_border__,
            __internal_border__,
            __internal_border__,
            __internal_border__,
            cv2.BORDER_CONSTANT,
            value=[255],
        )
        debug.image(gray_bordered, DebugImage.Level.DEBUG)
        dilated = cv2.dilate(
            gray_bordered,
            cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (xxx, xxx)),
        )
        debug.image(dilated, DebugImage.Level.DEBUG)
        thresholdi = cv2ext.threshold_from_gaussian_histogram_white(dilated)
        _, threshold = cv2.threshold(
            dilated, thresholdi, 255, cv2.THRESH_BINARY_INV
        )
        debug.image(threshold, DebugImage.Level.DEBUG)
    
        morpho1 = cv2.morphologyEx(
            threshold,
            cv2.MORPH_CLOSE,
            cv2.getStructuringElement(
                cv2.MORPH_ELLIPSE, param.kernel_morphology_size
            ),
        )
        debug.image(morpho1, DebugImage.Level.DEBUG)
&gt;       morpho2 = cv2.morphologyEx(
            morpho1,
            cv2.MORPH_OPEN,
            cv2.getStructuringElement(
                cv2.MORPH_ELLIPSE, param.kernel_morphology_size
            ),
        )
E       Failed: Timeout &gt;1.0s

page/find_images.py:188: Failed</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
/home/runner/work/ocr-book/ocr-book/tests/failed_split_line_line_algo_3.png

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

~~~~~~~~~~~~~~~~~~~~~ Stack of &lt;unknown&gt; (139797971138304) ~~~~~~~~~~~~~~~~~~~~~
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 285, in _perform_spawn
    reply.run()
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 220, in run
    self._result = func(*args, **kwargs)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 967, in _thread_receiver
    msg = Message.from_io(io)
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 432, in from_io
    header = io.read(9)  # type 1, channel 4, payload 4
  File "/opt/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/site-packages/execnet/gateway_base.py", line 400, in read
    data = self._read(numbytes - len(buf))

</system-err></testcase></testsuite></testsuites>